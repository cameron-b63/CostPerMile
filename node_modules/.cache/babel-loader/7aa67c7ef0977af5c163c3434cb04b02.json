{"ast":null,"code":"var _jsxFileName = \"/Users/alexhoang/ReactProjects/CostPerMile/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Button from 'react-bootstrap/Button';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Toast from 'react-bootstrap/Toast';\nimport Container from 'react-bootstrap/Container';\nimport { Form } from 'react-bootstrap';\nimport { Table } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      costpermile: 2,\n      iPaid: \"\",\n      miles: \"\",\n      mait: \"\",\n      api: [],\n      models: [],\n      originalPrice: \"\",\n      finalPrice: \"\",\n      tolls: \"\",\n      statecode: \"\",\n      mpg: \"\",\n      subscriptions: \"\",\n      gallon: \"\",\n      typeOfGas: \"gasoline\",\n      priceOfGas: \"\",\n      city: \"\",\n      VIN: \"\",\n      VINAPI: \"\",\n      depreciationValue: \"\",\n      fullcharge: \"\",\n      fullchargeCost: \"\",\n      zipcode: \"\",\n      carMake: \"\",\n      carModel: \"\",\n      isElectric: \"\",\n      carYear: \"\",\n      carBasePrice: \"\",\n      seeOtherCPM: \"\"\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleCarMake = this.handleCarMake.bind(this);\n  }\n\n  depreciate() {\n    let depreciation = (parseInt(this.state.originalPrice) - parseInt(this.state.finalPrice)) / (2021 - parseInt(this.state.carYear));\n    this.setState({\n      depreciationValue: depreciation\n    });\n  }\n\n  handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    this.setState({\n      [name]: value\n    });\n    console.log(this.state);\n  }\n\n  handleClick(e) {\n    this.getVIN(this.state.VIN);\n  }\n\n  handleCarMake() {\n    fetch('https://vpic.nhtsa.dot.gov/api/vehicles/getallmakes?format=json').then(response => response.json()).then(data => {\n      this.setState({\n        api: data[\"Results\"]\n      });\n      console.log(data[\"Results\"]);\n      console.log(this.state.api);\n    });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.depreciate();\n    this.getZIP(this.state.zipcode);\n\n    if (this.state.mpg.length > 0) {\n      this.getData(this.state.statecode);\n    }\n\n    let final;\n\n    if (this.state.mpg.length > 0) {\n      final = (parseInt(this.state.depreciationValue) + parseInt(this.state.iPaid) + this.state.miles * 52 / this.state.mpg * this.state.gallon + parseInt(this.state.mait) + parseInt(this.state.tolls) * 12 + parseInt(this.state.subscriptions)) / (parseInt(this.state.miles) * 52);\n    } else {\n      final = (parseInt(this.state.depreciationValue) + parseInt(this.state.iPaid) + parseInt(this.state.miles) / parseInt(this.state.fullcharge) * parseInt(this.state.fullchargeCost) + parseInt(this.state.mait) + parseInt(this.state.tolls) * 12 + parseInt(this.state.subscriptions)) / (parseInt(this.state.miles) * 52);\n    }\n\n    this.setState({\n      costpermile: final\n    });\n  }\n\n  getVIN(vin) {\n    var make;\n    var model;\n    var modelYear;\n    var basePrice;\n    var fuelType;\n\n    if (vin.length > 0) {\n      fetch('https://vpic.nhtsa.dot.gov/api/vehicles/decodevin/' + this.state.VIN + '?format=json&modelyear=').then(response => response.json()).then(data => {\n        this.setState({\n          VINAPI: data[\"Results\"]\n        });\n\n        if (this.state.VINAPI.length > 0) {\n          make = this.state.VINAPI.filter(x => x.Variable === \"Make\")[0].Value;\n          model = this.state.VINAPI.filter(x => x.Variable === \"Model\")[0].Value;\n          modelYear = this.state.VINAPI.filter(x => x.Variable === \"Model Year\")[0].Value;\n          basePrice = this.state.VINAPI.filter(x => x.Variable === \"Base Price ($)\")[0].Value;\n          fuelType = this.state.VINAPI.filter(x => x.Variable === \"Fuel Type - Primary\")[0].Value;\n\n          if (make === null || make === \"Not Applicable\") {\n            console.log(\"make is null\");\n          }\n\n          if (model === null || make === \"Not Applicable\") {\n            console.log(\"model is null\");\n          }\n\n          if (modelYear === null || make === \"Not Applicable\") {\n            console.log(\"modelYear is null\");\n          }\n\n          if (basePrice === null || make === \"Not Applicable\") {\n            console.log(\"basePrice is null\");\n          }\n\n          if (fuelType === null || make === \"Not Applicable\") {\n            console.log(\"fuelType is null\");\n          }\n\n          if (fuelType !== null) {\n            if (fuelType.indexOf(\"as\") > 0) {\n              fuelType = \"gas\";\n            } else {\n              fuelType = \"electric\";\n            }\n          } else {\n            fuelType = \"\";\n          }\n\n          this.setState({\n            carMake: make,\n            carModel: model,\n            carYear: modelYear,\n            carBasePrice: basePrice,\n            isElectric: fuelType\n          });\n          console.log(this.state);\n        }\n      });\n    }\n  }\n\n  getZIP(zip) {\n    if (zip.length > 0) {\n      /*var obj = {  \n          method: 'GET',\n          \n          \"port\": null,\n          \"path\": \"/rest/info.json/\" + this.state.zipcode + \"/degrees\",\n          headers: {\n              \"x-rapidapi-key\": \"73d45d6313mshd16f17ab16d3fe8p1368ecjsn7f132604eddb\",\n              \"x-rapidapi-host\": \"redline-redline-zipcode.p.rapidapi.com\",\n              \"useQueryString\": true\n          },\n          \n      };\n      fetch('redline-redline-zipcode.p.rapidapi.com',obj)\n      .then(response => response.json())\n      .then(data => {\n          console.log(data);\n          this.getData(this.state.statecode)\n      })\n      */\n      const http = require(\"https\");\n\n      const options = {\n        \"method\": \"GET\",\n        \"hostname\": \"redline-redline-zipcode.p.rapidapi.com\",\n        \"port\": null,\n        \"path\": \"/rest/info.json/\" + this.state.zipcode + \"/degrees\",\n        \"headers\": {\n          \"x-rapidapi-key\": \"73d45d6313mshd16f17ab16d3fe8p1368ecjsn7f132604eddb\",\n          \"x-rapidapi-host\": \"redline-redline-zipcode.p.rapidapi.com\",\n          \"useQueryString\": true\n        }\n      };\n      var self = this;\n      const req = http.request(options, function (res) {\n        const chunks = [];\n        res.on(\"data\", function (chunk) {\n          chunks.push(chunk);\n        });\n        res.on(\"end\", function () {\n          const body = Buffer.concat(chunks);\n          var bodyJSON = JSON.parse(body.toString());\n          console.log(bodyJSON);\n          self.setState({\n            statecode: bodyJSON.state,\n            city: bodyJSON.city\n          });\n          self.getData(self.state.statecode);\n        });\n      });\n      req.end();\n    }\n  }\n\n  getData(state) {\n    if (state.length > 0) {\n      /*const options = {\n          \"method\": \"GET\",\n          \n          \"port\": null,\n          \"path\": \"/gasPrice/stateUsaPrice?state=\" + state.toUpperCase(),\n          \"headers\": {\n              \"content-type\": \"application/json\",\n              \"authorization\": \"apikey 49S3NpApsO1VH7MBkPuIdl:7czVHVdiBbrpo2bR2gV987\"\n          }\n      }\n      fetch(\"api.collectapi.com\",options)\n      .then(response => response.json())\n      .then(data => {\n          console.log(data);\n          this.getData(this.state.statecode)\n      })\n      */\n      var http = require(\"https\");\n\n      var options = {\n        \"method\": \"GET\",\n        \"hostname\": \"api.collectapi.com\",\n        \"port\": null,\n        \"path\": \"/gasPrice/stateUsaPrice?state=\" + state.toUpperCase(),\n        \"headers\": {\n          \"content-type\": \"application/json\",\n          \"authorization\": \"apikey 49S3NpApsO1VH7MBkPuIdl:7czVHVdiBbrpo2bR2gV987\"\n        }\n      };\n      var self = this;\n      var req = http.request(options, function (res) {\n        var chunks = [];\n        res.on(\"data\", function (chunk) {\n          chunks.push(chunk);\n        });\n        res.on(\"end\", function () {\n          var body = Buffer.concat(chunks);\n          var bodyJSON = JSON.parse(body.toString());\n          console.log(bodyJSON);\n          console.log(self.state.typeOfGas);\n          var city = bodyJSON.result.cities.filter(x => x.name.toLowerCase() === self.state.city.toLowerCase());\n\n          if (city.length > 0) {\n            console.log(city[0][self.state.typeOfGas]);\n            self.setState({\n              gallon: city[0][self.state.typeOfGas]\n            });\n          }\n        });\n      });\n      req.end();\n    }\n  }\n\n  renderListElement(stringDisplay, CPM) {\n    return /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        children: stringDisplay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: CPM\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: this.state.costpermile.toFixed(2) - CPM > 0 ? \"+\" + (this.state.costpermile.toFixed(2) - CPM).toFixed(2) : (this.state.costpermile.toFixed(2) - CPM).toFixed(2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 9\n    }, this);\n  }\n\n  render() {\n    let allOptions;\n\n    if (this.state.api.length < 5) {\n      fetch('https://vpic.nhtsa.dot.gov/api/vehicles/getallmakes?format=json').then(response => response.json()).then(data => {\n        this.setState({\n          api: data[\"Results\"]\n        });\n      });\n    }\n\n    allOptions = this.state.api.map(num => /*#__PURE__*/_jsxDEV(\"option\", {\n      children: num.Make_Name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 50\n    }, this));\n    let allOptions2;\n    let renderCarModel;\n\n    if (this.state.carMake.length > 0) {\n      fetch('https://vpic.nhtsa.dot.gov/api/vehicles/GetModelsForMake/' + this.state.carMake + '?format=json').then(response => response.json()).then(data => {\n        this.setState({\n          models: data[\"Results\"]\n        });\n      });\n    }\n\n    var years = [];\n\n    for (var i = 0; i < 100; i++) {\n      years.push(2021 - i);\n    }\n\n    const carYears = years.map(num => /*#__PURE__*/_jsxDEV(\"option\", {\n      children: num\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 45\n    }, this));\n    allOptions2 = this.state.models.map(num => /*#__PURE__*/_jsxDEV(\"option\", {\n      children: num.Model_Name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 54\n    }, this)); //CONDITIONAL RENDERING FOR CAR MODEL BASED ON MAKE\n\n    if (this.state.carMake.length === 0) {\n      renderCarModel = /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 31\n      }, this);\n    } else {\n      renderCarModel = /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"What is your car model?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            as: \"select\",\n            onChange: this.handleChange,\n            id: \"carModel\",\n            name: \"carModel\",\n            value: this.state.carModel,\n            children: allOptions2\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 17\n      }, this);\n    }\n\n    let renderThis; // CONDITIONAL RENDERING BASED ON USER CHOICE IF ELECTRIC OR NOT\n\n    if (this.state.isElectric === null || this.state.isElectric.length === 0) {\n      renderThis = /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 27\n      }, this);\n    } else if (this.state.isElectric.indexOf(\"as\") > 0) {\n      renderThis = /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"What fuel type do you use?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 384,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            as: \"select\",\n            onChange: this.handleChange,\n            id: \"typeOfGas\",\n            type: \"text\",\n            name: \"typeOfGas\",\n            value: this.state.typeOfGas,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              name: \"typeOfGas\",\n              children: \" gasoline\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 394,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              name: \"typeOfGas\",\n              children: \"midGrade\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 395,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              name: \"typeOfGas\",\n              children: \" premium\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 396,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              name: \"typeOfGas\",\n              children: \" diesel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 397,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n            children: \"Do not answer this question if you are an electric vehicle user\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 32\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"What is your MPG(Miles Per Gallon)?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 406,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            placeholder: \"Enter your mpg\",\n            onChange: this.handleChange,\n            id: \"mpg\",\n            type: \"number\",\n            name: \"mpg\",\n            value: this.state.mpg\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 410,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n            children: \"Do not answer this question if you are an electric vehicle user\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"What is your zip code?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 424,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            placeholder: \"Enter your zip code\",\n            onChange: this.handleChange,\n            id: \"zipcode\",\n            type: \"number\",\n            name: \"zipcode\",\n            value: this.state.zipcode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n            children: \"This question gets the gas prices in your area!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 436,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: this.state.city.length > 0 ? \"Your city, state is \" + this.state.city + \", \" + this.state.statecode : \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 27\n      }, this);\n    } else {\n      renderThis = /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"If you drive an electric vehicle, how far can you drive on a full charge in miles?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 449,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            placeholder: \"fullcharge\",\n            onChange: this.handleChange,\n            id: \"fullcharge\",\n            type: \"number\",\n            name: \"fullcharge\",\n            value: this.state.fullcharge\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 453,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n            children: \"Do not answer this question if you are a gas vehicle user\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 461,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 448,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"If you drive an electric vehicle, how much does it cost for a full charge?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            placeholder: \"fullchargeCost\",\n            onChange: this.handleChange,\n            id: \"fullchargeCost\",\n            type: \"number\",\n            name: \"fullchargeCost\",\n            value: this.state.fullchargeCost\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 470,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n            children: \"Do not answer this question if you are a gas vehicle user\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 27\n      }, this);\n    }\n\n    let otherCPM; //CONDITIONAL RENDERING FOR DATA SHOWN AT THE BOTTOM\n\n    if (this.state.seeOtherCPM.indexOf(\"10k\") > 0) {\n      otherCPM = /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [this.renderListElement(\"Average US Driver who drives a Small Sedan (10k miles)\", 0.61), this.renderListElement(\"Average US Driver who drives a Medium Sedan (10k miles)\", 0.75), this.renderListElement(\"Average US Driver who drives a Large Sedan (10k miles)\", 0.90), this.renderListElement(\"Average US Driver who drives a Small SUV (10k miles)\", 0.71), this.renderListElement(\"Average US Driver who drives a Medium SUV (10k miles)\", 0.87), this.renderListElement(\"Average US Driver who drives a Minivan (10k miles)\", 0.87), this.renderListElement(\"Average US Driver who drives a Hybrid Vehicle (10k miles)\", 0.68), this.renderListElement(\"Average US Driver who drives an Electric Vehicle (10k miles\", 0.75)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 17\n      }, this);\n    } else if (this.state.seeOtherCPM.indexOf(\"15k\") > 0) {\n      otherCPM = /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [this.renderListElement(\"Average US Driver who drives a Small Sedan (15k miles)\", 0.47), this.renderListElement(\"Average US Driver who drives a Medium Sedan (15k miles)\", 0.58), this.renderListElement(\"Average US Driver who drives a Large Sedan (15k miles)\", 0.69), this.renderListElement(\"Average US Driver who drives a Small SUV (15k miles)\", 0.56), this.renderListElement(\"Average US Driver who drives a Medium SUV (15k miles)\", 0.68), this.renderListElement(\"Average US Driver who drives a Minivan (15k miles)\", 0.67), this.renderListElement(\"Average US Driver who drives a Hybrid Vehicle (15k miles)\", 0.52), this.renderListElement(\"Average US Driver who drives an Electric Vehicle (15k miles\", 0.55)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 506,\n        columnNumber: 17\n      }, this);\n    } else if (this.state.seeOtherCPM.indexOf(\"20k\") > 0) {\n      otherCPM = /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [this.renderListElement(\"Average US Driver who drives a Small Sedan (20k miles)\", 0.41), this.renderListElement(\"Average US Driver who drives a Medium Sedan (20k miles)\", 0.49), this.renderListElement(\"Average US Driver who drives a Large Sedan (20k miles)\", 0.59), this.renderListElement(\"Average US Driver who drives a Small SUV (20k miles)\", 0.48), this.renderListElement(\"Average US Driver who drives a Medium SUV (20k miles)\", 0.59), this.renderListElement(\"Average US Driver who drives a Minivan (20k miles)\", 0.57), this.renderListElement(\"Average US Driver who drives a Hybrid Vehicle (20k miles)\", 0.43), this.renderListElement(\"Average US Driver who drives an Electric Vehicle (20k miles\", 0.46)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 521,\n        columnNumber: 17\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Jumbotron, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Cost Per Mile Calculator\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Fill out these questions to the best of your abilitiy as they are the basis of calculating your cost per mile. You will be asked about information that you may not know about some of these questions so fill them out to the best of your ability.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 542,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 537,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Jumbotron, {\n        children: [/*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: this.handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"How many miles do you usually drive per week?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 552,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"number\",\n              placeholder: \"Enter how many miles driven\",\n              onChange: this.handleChange,\n              id: \"miles\",\n              type: \"number\",\n              name: \"miles\",\n              value: this.state.miles\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 556,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n              className: \"text-muted\",\n              children: \"Enter the miles you usually drive per week\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 564,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 550,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"How much have you paid for insurance a year?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 575,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              placeholder: \"Enter the amount of insurance paid per year\",\n              onChange: this.handleChange,\n              id: \"insurance\",\n              type: \"number\",\n              name: \"iPaid\",\n              value: this.state.iPaid\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 580,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n              className: \"text-muted\",\n              children: \"Enter how much insurace you pay each year\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 588,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 573,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"How much have you paid for maitenance a year?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 597,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              placeholder: \"Enter how much you pay for maitenance a year\",\n              onChange: this.handleChange,\n              id: \"maitenance\",\n              type: \"number\",\n              name: \"mait\",\n              value: this.state.mait\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 602,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n              className: \"text-muted\",\n              children: \"Enter how much you usually pay for maitenance in a year\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 610,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 595,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"How much do you pay for tolls every month?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 617,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              placeholder: \"Enter how much you pay for tolls\",\n              onChange: this.handleChange,\n              id: \"tolls\",\n              type: \"number\",\n              name: \"tolls\",\n              value: this.state.tolls\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 622,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n              className: \"text-muted\",\n              children: \"Enter how much you usually pay for tolls every month\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 630,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 616,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"How much do you pay for other related car costs per year?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 636,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              placeholder: \"Enter your other car related costs throughout the year\",\n              onChange: this.handleChange,\n              id: \"subscriptions\",\n              type: \"number\",\n              name: \"subscriptions\",\n              value: this.state.subscriptions\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 639,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 635,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Enter your VIN(Vehicle Identification Number) here\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 652,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              placeholder: \"VIN\",\n              onChange: this.handleChange,\n              id: \"VIN\",\n              type: \"text\",\n              name: \"VIN\",\n              value: this.state.VIN\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 655,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: this.handleClick,\n              children: \"Submit your VIN to get official data from the NHTSA\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 663,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n              children: \"We are gathering this information in order to gather your mpg, car make, car model, and car year. If you do not know your VIN or do not want to share your VIN, enter the following questions to the best of your ability. However, if you do know your VIN, enter it and click the following button . Some data about your car may still be missing so answer the unaswered questions.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 668,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 651,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"What is your car make?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 673,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              as: \"select\",\n              placeholder: \"Enter your car make\",\n              onChange: this.handleChange,\n              id: \"carMake\",\n              type: \"text\",\n              name: \"carMake\",\n              value: this.state.carMake,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 684,\n                columnNumber: 33\n              }, this), allOptions]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 676,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: renderCarModel\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 689,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 672,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"What is your car year?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 696,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              onChange: this.handleChange,\n              id: \"carYear\",\n              name: \"carYear\",\n              value: this.state.carYear,\n              as: \"select\",\n              children: carYears\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 699,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 695,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Are you an electric vehicle user or gas car user?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 710,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              as: \"select\",\n              onChange: this.handleChange,\n              id: \"isElectric\",\n              type: \"text\",\n              name: \"isElectric\",\n              value: this.state.isElectric,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                name: \"isElectric\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 723,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                name: \"isElectric\",\n                children: \"gas\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 724,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                name: \"isElectric\",\n                children: \"electric\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 725,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 715,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: renderThis\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 729,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 708,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 736,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 737,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"How much was this car when it was brand new?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 742,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              placeholder: \"Enter your original price\",\n              onChange: this.handleChange,\n              id: \"originalPrice\",\n              type: \"number\",\n              name: \"originalPrice\",\n              value: this.state.originalPrice\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 745,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 741,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"How much is your car worth now?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 755,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              placeholder: \"Enter the current price\",\n              onChange: this.handleChange,\n              id: \"finalPrice\",\n              type: \"number\",\n              name: \"finalPrice\",\n              value: this.state.finalPrice\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 758,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 754,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 767,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 549,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 770,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Enter what information you would like to see\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 772,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            as: \"select\",\n            onChange: this.handleChange,\n            id: \"seeOtherCPM\",\n            type: \"text\",\n            name: \"seeOtherCPM\",\n            value: this.state.seeOtherCPM,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              name: \"seeOtherCPM\",\n              children: \"-Choose one of the below-\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 782,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              name: \"seeOtherCPM\",\n              children: \"Average for 10k miles\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 783,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              name: \"seeOtherCPM\",\n              children: \"Average for 15k miles\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 784,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              name: \"seeOtherCPM\",\n              children: \"Average for 20k miles\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 785,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 775,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 771,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Table, {\n          striped: true,\n          bordered: true,\n          hover: true,\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Cost per mile of\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 792,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Cost per mile ($)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 793,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Cost per mile in relation to You\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 794,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 791,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 790,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: \"You\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 799,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: this.state.costpermile.toFixed(2)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 800,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: (this.state.costpermile - this.state.costpermile).toFixed(2)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 801,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 798,\n              columnNumber: 29\n            }, this), this.renderListElement(\"Average US Driver who drives 10k miles\", 0, 79), this.renderListElement(\"Average US Driver who drives 15k miles\", 0.61), this.renderListElement(\"Average US Driver who drives 20k mile\", 0.53), this.renderListElement(\"Average US Driver who drives a Small Sedan (10k miles)\", 0.61), this.renderListElement(\"Average US Driver who drives a Medium Sedan (10k miles)\", 0.75), this.renderListElement(\"Average US Driver who drives a Large Sedan (10k miles)\", 0.90), this.renderListElement(\"Average US Driver who drives a Small SUV (10k miles)\", 0.71), this.renderListElement(\"Average US Driver who drives a Medium SUV (10k miles)\", 0.87), this.renderListElement(\"Average US Driver who drives a Minivan (10k miles)\", 0.87), this.renderListElement(\"Average US Driver who drives a Hybrid Vehicle (10k miles)\", 0.68), this.renderListElement(\"Average US Driver who drives an Electric Vehicle (10k miles\", 0.75)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 797,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 789,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 546,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 535,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(Calculator, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 828,\n  columnNumber: 5\n}, this), document.getElementById(\"root\"));","map":{"version":3,"sources":["/Users/alexhoang/ReactProjects/CostPerMile/src/index.js"],"names":["React","ReactDOM","Button","Jumbotron","Toast","Container","Form","Table","Calculator","Component","constructor","props","state","costpermile","iPaid","miles","mait","api","models","originalPrice","finalPrice","tolls","statecode","mpg","subscriptions","gallon","typeOfGas","priceOfGas","city","VIN","VINAPI","depreciationValue","fullcharge","fullchargeCost","zipcode","carMake","carModel","isElectric","carYear","carBasePrice","seeOtherCPM","handleChange","bind","handleSubmit","handleClick","handleCarMake","depreciate","depreciation","parseInt","setState","event","name","value","target","console","log","e","getVIN","fetch","then","response","json","data","preventDefault","getZIP","length","getData","final","vin","make","model","modelYear","basePrice","fuelType","filter","x","Variable","Value","indexOf","zip","http","require","options","self","req","request","res","chunks","on","chunk","push","body","Buffer","concat","bodyJSON","JSON","parse","toString","end","toUpperCase","result","cities","toLowerCase","renderListElement","stringDisplay","CPM","toFixed","render","allOptions","map","num","Make_Name","allOptions2","renderCarModel","years","i","carYears","Model_Name","renderThis","otherCPM","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport Button from 'react-bootstrap/Button';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Toast from 'react-bootstrap/Toast';\nimport Container from 'react-bootstrap/Container';\nimport { Form } from 'react-bootstrap';\nimport { Table } from 'react-bootstrap';\nclass Calculator extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            costpermile: 2,\n            iPaid: \"\",\n            miles: \"\",\n            mait: \"\",\n            api: [],\n            models: [],\n            originalPrice: \"\",\n            finalPrice: \"\",\n            tolls: \"\",\n            statecode: \"\",\n            mpg: \"\",\n            subscriptions: \"\",\n            gallon: \"\",\n            typeOfGas: \"gasoline\",\n            priceOfGas: \"\",\n            city: \"\",\n            VIN: \"\",\n            VINAPI: \"\",\n            depreciationValue: \"\",\n            fullcharge: \"\",\n            fullchargeCost: \"\",\n            zipcode: \"\",\n            carMake: \"\",\n            carModel: \"\",\n            isElectric: \"\",\n            carYear: \"\",\n            carBasePrice: \"\",\n            seeOtherCPM: \"\",\n\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n        this.handleCarMake = this.handleCarMake.bind(this);\n\n\n    }\n\n    depreciate() {\n\n        let depreciation = (parseInt(this.state.originalPrice) - parseInt(this.state.finalPrice)) / (2021 - parseInt(this.state.carYear));\n        this.setState({ depreciationValue: depreciation });\n    }\n    handleChange(event) {\n        const { name, value } = event.target\n        this.setState({\n            [name]: value,\n        });\n\n        console.log(this.state);\n    }\n    handleClick(e) {\n        this.getVIN(this.state.VIN);\n\n    }\n    handleCarMake() {\n        fetch('https://vpic.nhtsa.dot.gov/api/vehicles/getallmakes?format=json')\n            .then(response => response.json())\n            .then(data => {\n                this.setState({ api: data[\"Results\"] })\n                console.log(data[\"Results\"])\n                console.log(this.state.api);\n            })\n\n    }\n    handleSubmit(e) {\n        e.preventDefault();\n        this.depreciate();\n        this.getZIP(this.state.zipcode);\n\n        if (this.state.mpg.length > 0) {\n            this.getData(this.state.statecode);\n        }\n\n\n        let final;\n\n        if (this.state.mpg.length > 0) {\n            final = (parseInt(this.state.depreciationValue) +\n                parseInt(this.state.iPaid) +\n                (((this.state.miles * 52) / this.state.mpg) * this.state.gallon) +\n                parseInt(this.state.mait) +\n                (parseInt(this.state.tolls) * 12) +\n                parseInt(this.state.subscriptions))\n                / (parseInt(this.state.miles) * 52);\n        } else {\n            final = (parseInt(this.state.depreciationValue) +\n                parseInt(this.state.iPaid) +\n                ((parseInt(this.state.miles) / parseInt(this.state.fullcharge)) * parseInt(this.state.fullchargeCost)) +\n                parseInt(this.state.mait) +\n                (parseInt(this.state.tolls) * 12) +\n                parseInt(this.state.subscriptions)) /\n                (parseInt(this.state.miles) * 52);\n\n        }\n\n        this.setState(\n            {\n                costpermile: final\n            })\n    }\n    getVIN(vin) {\n        var make;\n        var model;\n        var modelYear;\n        var basePrice;\n        var fuelType;\n        if (vin.length > 0) {\n            fetch('https://vpic.nhtsa.dot.gov/api/vehicles/decodevin/' + this.state.VIN + '?format=json&modelyear=')\n                .then(response => response.json())\n                .then(data => {\n                    this.setState({ VINAPI: data[\"Results\"] });\n\n                    if (this.state.VINAPI.length > 0) {\n                        make = this.state.VINAPI.filter((x) => x.Variable === \"Make\")[0].Value;\n                        model = this.state.VINAPI.filter((x) => x.Variable === \"Model\")[0].Value;\n                        modelYear = this.state.VINAPI.filter((x) => x.Variable === \"Model Year\")[0].Value;\n                        basePrice = this.state.VINAPI.filter((x) => x.Variable === \"Base Price ($)\")[0].Value;\n                        fuelType = this.state.VINAPI.filter((x) => x.Variable === \"Fuel Type - Primary\")[0].Value;\n                        if (make === null || make === \"Not Applicable\") {\n                            console.log(\"make is null\");\n                        }\n                        if (model === null || make === \"Not Applicable\") {\n                            console.log(\"model is null\");\n                        }\n                        if (modelYear === null || make === \"Not Applicable\") {\n                            console.log(\"modelYear is null\");\n                        }\n                        if (basePrice === null || make === \"Not Applicable\") {\n                            console.log(\"basePrice is null\");\n                        }\n                        if (fuelType === null || make === \"Not Applicable\") {\n                            console.log(\"fuelType is null\");\n                        }\n                        if (fuelType !== null) {\n                            if (fuelType.indexOf(\"as\") > 0) {\n                                fuelType = \"gas\"\n                            } else {\n                                fuelType = \"electric\"\n                            }\n                        } else {\n                            fuelType = \"\"\n                        }\n                        this.setState({\n                            carMake: make,\n                            carModel: model,\n                            carYear: modelYear,\n                            carBasePrice: basePrice,\n                            isElectric: fuelType\n                        })\n                        console.log(this.state);\n                    }\n\n                })\n\n        }\n    }\n\n    getZIP(zip) {\n        if (zip.length > 0) {\n\n            /*var obj = {  \n                method: 'GET',\n                \n                \"port\": null,\n                \"path\": \"/rest/info.json/\" + this.state.zipcode + \"/degrees\",\n                headers: {\n                    \"x-rapidapi-key\": \"73d45d6313mshd16f17ab16d3fe8p1368ecjsn7f132604eddb\",\n                    \"x-rapidapi-host\": \"redline-redline-zipcode.p.rapidapi.com\",\n                    \"useQueryString\": true\n                },\n                \n            };\n            fetch('redline-redline-zipcode.p.rapidapi.com',obj)\n            .then(response => response.json())\n            .then(data => {\n                console.log(data);\n                this.getData(this.state.statecode)\n            })\n            */\n\n\n\n            const http = require(\"https\");\n\n            const options = {\n                \"method\": \"GET\",\n                \"hostname\": \"redline-redline-zipcode.p.rapidapi.com\",\n                \"port\": null,\n                \"path\": \"/rest/info.json/\" + this.state.zipcode + \"/degrees\",\n                \"headers\": {\n                    \"x-rapidapi-key\": \"73d45d6313mshd16f17ab16d3fe8p1368ecjsn7f132604eddb\",\n                    \"x-rapidapi-host\": \"redline-redline-zipcode.p.rapidapi.com\",\n                    \"useQueryString\": true\n                }\n            };\n            var self = this;\n            const req = http.request(options, function (res) {\n                const chunks = [];\n\n                res.on(\"data\", function (chunk) {\n                    chunks.push(chunk);\n                });\n\n                res.on(\"end\", function () {\n                    const body = Buffer.concat(chunks);\n\n                    var bodyJSON = JSON.parse(body.toString());\n                    console.log(bodyJSON);\n                    self.setState({\n                        statecode: bodyJSON.state,\n                        city: bodyJSON.city,\n                    })\n\n\n                    self.getData(self.state.statecode);\n\n                });\n            });\n\n            req.end();\n\n\n\n        }\n    }\n\n\n    getData(state) {\n\n        if (state.length > 0) {\n\n\n            /*const options = {\n                \"method\": \"GET\",\n                \n                \"port\": null,\n                \"path\": \"/gasPrice/stateUsaPrice?state=\" + state.toUpperCase(),\n                \"headers\": {\n                    \"content-type\": \"application/json\",\n                    \"authorization\": \"apikey 49S3NpApsO1VH7MBkPuIdl:7czVHVdiBbrpo2bR2gV987\"\n                }\n            }\n            fetch(\"api.collectapi.com\",options)\n            .then(response => response.json())\n            .then(data => {\n                console.log(data);\n                this.getData(this.state.statecode)\n            })\n            */\n\n\n            var http = require(\"https\");\n\n            var options = {\n                \"method\": \"GET\",\n                \"hostname\": \"api.collectapi.com\",\n                \"port\": null,\n                \"path\": \"/gasPrice/stateUsaPrice?state=\" + state.toUpperCase(),\n                \"headers\": {\n                    \"content-type\": \"application/json\",\n                    \"authorization\": \"apikey 49S3NpApsO1VH7MBkPuIdl:7czVHVdiBbrpo2bR2gV987\"\n                }\n            };\n            var self = this;\n            var req = http.request(options, function (res) {\n                var chunks = [];\n\n                res.on(\"data\", function (chunk) {\n                    chunks.push(chunk);\n                });\n\n                res.on(\"end\", function () {\n                    var body = Buffer.concat(chunks);\n                    var bodyJSON = JSON.parse(body.toString());\n                    console.log(bodyJSON);\n                    console.log(self.state.typeOfGas);\n                    var city = bodyJSON.result.cities.filter((x) => x.name.toLowerCase() === self.state.city.toLowerCase());\n                    if (city.length > 0) {\n                        console.log(city[0][self.state.typeOfGas]);\n                        self.setState({\n                            gallon: city[0][self.state.typeOfGas]\n                        })\n                    }\n\n                });\n            });\n\n            req.end();\n\n\n        }\n    }\n    renderListElement(stringDisplay, CPM) {\n        return(\n        <tr>\n            <td>{stringDisplay}</td>\n            <td>{CPM}</td>\n            <td>{this.state.costpermile.toFixed(2) - CPM > 0 ? \"+\" + (this.state.costpermile.toFixed(2) - CPM).toFixed(2) : (this.state.costpermile.toFixed(2) - CPM).toFixed(2)}</td>\n        </tr>\n        );\n    }\n    render() {\n        let allOptions;\n        if (this.state.api.length < 5) {\n            fetch('https://vpic.nhtsa.dot.gov/api/vehicles/getallmakes?format=json')\n                .then(response => response.json())\n                .then(data => {\n                    this.setState({ api: data[\"Results\"] });\n\n                })\n        }\n        allOptions = this.state.api.map((num) => <option>{num.Make_Name}</option>)\n        let allOptions2;\n        let renderCarModel;\n\n\n        if (this.state.carMake.length > 0) {\n            fetch('https://vpic.nhtsa.dot.gov/api/vehicles/GetModelsForMake/' + this.state.carMake + '?format=json')\n                .then(response => response.json())\n                .then(data => {\n                    this.setState({ models: data[\"Results\"] });\n\n                })\n\n        }\n\n        var years = [];\n        for (var i = 0; i < 100; i++) {\n            years.push(2021 - i);\n        }\n        const carYears = years.map((num) => <option>{num}</option>)\n        allOptions2 = this.state.models.map((num) => <option>{num.Model_Name}</option>)\n\n        //CONDITIONAL RENDERING FOR CAR MODEL BASED ON MAKE\n        if (this.state.carMake.length === 0) {\n            renderCarModel = (<div></div>);\n        }\n        else {\n            renderCarModel = (\n                <div>\n                    <Form.Group>\n                        <Form.Label>\n                            What is your car model?\n                        </Form.Label>\n                        <Form.Control\n                            as=\"select\"\n\n                            onChange={this.handleChange}\n                            id=\"carModel\"\n                            name=\"carModel\"\n                            value={this.state.carModel}\n                        >\n                            {allOptions2}\n                        </Form.Control>\n                    </Form.Group>\n                </div>\n            );\n\n        }\n\n        let renderThis;\n        // CONDITIONAL RENDERING BASED ON USER CHOICE IF ELECTRIC OR NOT\n        if (this.state.isElectric === null || this.state.isElectric.length === 0) {\n            renderThis = (<div></div>);\n        }\n        else if (this.state.isElectric.indexOf(\"as\") > 0) {\n            renderThis = (<div><Form.Group>\n                <Form.Label>\n                    What fuel type do you use?\n                </Form.Label>\n                <Form.Control as=\"select\"\n                    onChange={this.handleChange}\n                    id=\"typeOfGas\"\n                    type=\"text\"\n                    name=\"typeOfGas\"\n                    value={this.state.typeOfGas}\n                >\n                    <option name=\"typeOfGas\"> gasoline</option>\n                    <option name=\"typeOfGas\">midGrade</option>\n                    <option name=\"typeOfGas\"> premium</option>\n                    <option name=\"typeOfGas\"> diesel</option>\n                </Form.Control>\n                <Form.Text>\n                    Do not answer this question if you are an electric vehicle user\n                </Form.Text>\n            </Form.Group>\n\n\n                <Form.Group>\n                    <Form.Label>\n                        What is your MPG(Miles Per Gallon)?\n                    </Form.Label>\n\n                    <Form.Control\n                        placeholder=\"Enter your mpg\"\n                        onChange={this.handleChange}\n                        id=\"mpg\"\n                        type=\"number\"\n                        name=\"mpg\"\n                        value={this.state.mpg}\n                    />\n                    <Form.Text>\n                        Do not answer this question if you are an electric vehicle user\n                    </Form.Text>\n                </Form.Group>\n\n                <Form.Group>\n                    <Form.Label>\n                        What is your zip code?\n                    </Form.Label>\n\n                    <Form.Control\n                        placeholder=\"Enter your zip code\"\n                        onChange={this.handleChange}\n                        id=\"zipcode\"\n                        type=\"number\"\n                        name=\"zipcode\"\n                        value={this.state.zipcode}\n                    />\n                    <Form.Text >\n                        This question gets the gas prices in your area!\n                    </Form.Text>\n                </Form.Group>\n\n\n                <label>\n                    {this.state.city.length > 0 ? \"Your city, state is \" + this.state.city + \", \" + this.state.statecode : \"\"}\n                </label>\n            </div>);\n        } else {\n            renderThis = (<div>\n                <Form.Group>\n                    <Form.Label>\n                        If you drive an electric vehicle, how far can you drive on a full charge in miles?\n                    </Form.Label>\n\n                    <Form.Control\n                        placeholder=\"fullcharge\"\n                        onChange={this.handleChange}\n                        id=\"fullcharge\"\n                        type=\"number\"\n                        name=\"fullcharge\"\n                        value={this.state.fullcharge}\n                    />\n                    <Form.Text>\n                        Do not answer this question if you are a gas vehicle user\n                    </Form.Text>\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>\n                        If you drive an electric vehicle, how much does it cost for a full charge?\n                    </Form.Label>\n\n                    <Form.Control\n                        placeholder=\"fullchargeCost\"\n                        onChange={this.handleChange}\n                        id=\"fullchargeCost\"\n                        type=\"number\"\n                        name=\"fullchargeCost\"\n                        value={this.state.fullchargeCost}\n                    />\n                    <Form.Text>\n                        Do not answer this question if you are a gas vehicle user\n                    </Form.Text>\n                </Form.Group>\n            </div>);\n        }\n\n        let otherCPM;\n        //CONDITIONAL RENDERING FOR DATA SHOWN AT THE BOTTOM\n        if(this.state.seeOtherCPM.indexOf(\"10k\") > 0)\n        {\n            otherCPM = (\n\n                <div>\n                    {this.renderListElement(\"Average US Driver who drives a Small Sedan (10k miles)\", 0.61)}\n                    {this.renderListElement(\"Average US Driver who drives a Medium Sedan (10k miles)\", 0.75)}\n                    {this.renderListElement(\"Average US Driver who drives a Large Sedan (10k miles)\",0.90)}\n                    {this.renderListElement(\"Average US Driver who drives a Small SUV (10k miles)\",0.71)}\n                    {this.renderListElement(\"Average US Driver who drives a Medium SUV (10k miles)\",0.87)}\n                    {this.renderListElement(\"Average US Driver who drives a Minivan (10k miles)\", 0.87)}\n                    {this.renderListElement(\"Average US Driver who drives a Hybrid Vehicle (10k miles)\",0.68)}\n                    {this.renderListElement(\"Average US Driver who drives an Electric Vehicle (10k miles\", 0.75)}\n                </div>\n            )\n            \n        }\n        else if(this.state.seeOtherCPM.indexOf(\"15k\") >0){\n            otherCPM = (\n                <div>\n                    {this.renderListElement(\"Average US Driver who drives a Small Sedan (15k miles)\", 0.47)}\n                    {this.renderListElement(\"Average US Driver who drives a Medium Sedan (15k miles)\", 0.58)}\n                    {this.renderListElement(\"Average US Driver who drives a Large Sedan (15k miles)\",0.69)}\n                    {this.renderListElement(\"Average US Driver who drives a Small SUV (15k miles)\",0.56)}\n                    {this.renderListElement(\"Average US Driver who drives a Medium SUV (15k miles)\",0.68)}\n                    {this.renderListElement(\"Average US Driver who drives a Minivan (15k miles)\", 0.67)}\n                    {this.renderListElement(\"Average US Driver who drives a Hybrid Vehicle (15k miles)\",0.52)}\n                    {this.renderListElement(\"Average US Driver who drives an Electric Vehicle (15k miles\", 0.55)}\n                </div>\n\n            )\n        }\n        else if(this.state.seeOtherCPM.indexOf(\"20k\") >0){\n            otherCPM = (\n                <div>\n                    {this.renderListElement(\"Average US Driver who drives a Small Sedan (20k miles)\", 0.41)}\n                    {this.renderListElement(\"Average US Driver who drives a Medium Sedan (20k miles)\", 0.49)}\n                    {this.renderListElement(\"Average US Driver who drives a Large Sedan (20k miles)\",0.59)}\n                    {this.renderListElement(\"Average US Driver who drives a Small SUV (20k miles)\",0.48)}\n                    {this.renderListElement(\"Average US Driver who drives a Medium SUV (20k miles)\",0.59)}\n                    {this.renderListElement(\"Average US Driver who drives a Minivan (20k miles)\", 0.57)}\n                    {this.renderListElement(\"Average US Driver who drives a Hybrid Vehicle (20k miles)\",0.43)}\n                    {this.renderListElement(\"Average US Driver who drives an Electric Vehicle (20k miles\", 0.46)}\n                </div>\n\n            )\n        }\n        return (\n            <Container>\n\n                <Jumbotron>\n                    <h1>\n                        Cost Per Mile Calculator\n\n                    </h1>\n                    <p>\n                        Fill out these questions to the best of your abilitiy as they are the basis of calculating your cost per mile. You will be asked about information that you may not know about some of these questions so fill them out to the best of your ability.\n                    </p>\n                </Jumbotron>\n                <Jumbotron>\n\n\n                    <Form onSubmit={this.handleSubmit}>\n                        <Form.Group>\n\n                            <Form.Label>\n                                How many miles do you usually drive per week?\n                            </Form.Label>\n\n                            <Form.Control type=\"number\"\n                                placeholder=\"Enter how many miles driven\"\n                                onChange={this.handleChange}\n                                id=\"miles\"\n                                type=\"number\"\n                                name=\"miles\"\n                                value={this.state.miles}\n                            />\n                            <Form.Text className=\"text-muted\">\n                                Enter the miles you usually drive per week\n                            </Form.Text>\n\n\n                        </Form.Group>\n\n\n\n                        <Form.Group>\n\n                            <Form.Label>\n                                How much have you paid for insurance a year?\n                            </Form.Label>\n\n\n                            <Form.Control\n                                placeholder=\"Enter the amount of insurance paid per year\"\n                                onChange={this.handleChange}\n                                id=\"insurance\"\n                                type=\"number\"\n                                name=\"iPaid\"\n                                value={this.state.iPaid}\n                            />\n                            <Form.Text className=\"text-muted\">\n                                Enter how much insurace you pay each year\n                            </Form.Text>\n                        </Form.Group>\n\n\n\n                        <Form.Group>\n\n                            <Form.Label>\n                                How much have you paid for maitenance a year?\n                            </Form.Label>\n\n\n                            <Form.Control\n                                placeholder=\"Enter how much you pay for maitenance a year\"\n                                onChange={this.handleChange}\n                                id=\"maitenance\"\n                                type=\"number\"\n                                name=\"mait\"\n                                value={this.state.mait}\n                            />\n                            <Form.Text className=\"text-muted\">\n                                Enter how much you usually pay for maitenance in a year\n                            </Form.Text>\n                        </Form.Group>\n\n\n                        <Form.Group>\n                            <Form.Label>\n                                How much do you pay for tolls every month?\n                            </Form.Label>\n\n\n                            <Form.Control\n                                placeholder=\"Enter how much you pay for tolls\"\n                                onChange={this.handleChange}\n                                id=\"tolls\"\n                                type=\"number\"\n                                name=\"tolls\"\n                                value={this.state.tolls}\n                            />\n                            <Form.Text className=\"text-muted\">\n                                Enter how much you usually pay for tolls every month\n                            </Form.Text>\n                        </Form.Group>\n\n                        <Form.Group>\n                            <Form.Label>\n                                How much do you pay for other related car costs per year?\n                            </Form.Label>\n                            <Form.Control\n                                placeholder=\"Enter your other car related costs throughout the year\"\n                                onChange={this.handleChange}\n                                id=\"subscriptions\"\n                                type=\"number\"\n                                name=\"subscriptions\"\n                                value={this.state.subscriptions}\n                            />\n\n\n                        </Form.Group>\n\n                        <Form.Group>\n                            <Form.Label>\n                                Enter your VIN(Vehicle Identification Number) here\n                            </Form.Label>\n                            <Form.Control\n                                placeholder=\"VIN\"\n                                onChange={this.handleChange}\n                                id=\"VIN\"\n                                type=\"text\"\n                                name=\"VIN\"\n                                value={this.state.VIN}\n                            />\n                            <Button\n                                onClick={this.handleClick}\n                            >\n                                Submit your VIN to get official data from the NHTSA\n                            </Button>\n                            <Form.Text>\n                                We are gathering this information in order to gather your mpg, car make, car model, and car year. If you do not know your VIN or do not want to share your VIN, enter the following questions to the best of your ability. However, if you do know your VIN, enter it and click the following button . Some data about your car may still be missing so answer the unaswered questions.\n                            </Form.Text>\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>\n                                What is your car make?\n                            </Form.Label>\n                            <Form.Control as=\"select\"\n                                placeholder=\"Enter your car make\"\n                                onChange={this.handleChange}\n                                id=\"carMake\"\n                                type=\"text\"\n                                name=\"carMake\"\n                                value={this.state.carMake}\n                            >\n                                <option></option>\n                                {allOptions}\n\n                            </Form.Control>\n\n                            <div>\n                                {renderCarModel}\n\n                            </div>\n\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>\n                                What is your car year?\n                            </Form.Label>\n                            <Form.Control\n                                onChange={this.handleChange}\n                                id=\"carYear\"\n                                name=\"carYear\"\n                                value={this.state.carYear}\n                                as=\"select\">\n                                {carYears}\n                            </Form.Control>\n                        </Form.Group>\n                        <Form.Group>\n\n                            <Form.Label>\n                                Are you an electric vehicle user or gas car user?\n                            </Form.Label>\n\n\n                            <Form.Control as=\"select\"\n\n                                onChange={this.handleChange}\n                                id=\"isElectric\"\n                                type=\"text\"\n                                name=\"isElectric\"\n                                value={this.state.isElectric}\n                            >\n                                <option name=\"isElectric\"></option>\n                                <option name=\"isElectric\">gas</option>\n                                <option name=\"isElectric\">electric</option>\n\n                            </Form.Control>\n\n                            <div>\n                                {renderThis}\n                            </div>\n\n                        </Form.Group>\n\n\n                        <br />\n                        <br />\n\n\n\n                        <Form.Group>\n                            <Form.Label>\n                                How much was this car when it was brand new?\n                            </Form.Label>\n                            <Form.Control\n                                placeholder=\"Enter your original price\"\n                                onChange={this.handleChange}\n                                id=\"originalPrice\"\n                                type=\"number\"\n                                name=\"originalPrice\"\n                                value={this.state.originalPrice}\n                            />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>\n                                How much is your car worth now?\n                            </Form.Label>\n                            <Form.Control\n                                placeholder=\"Enter the current price\"\n                                onChange={this.handleChange}\n                                id=\"finalPrice\"\n                                type=\"number\"\n                                name=\"finalPrice\"\n                                value={this.state.finalPrice}\n                            />\n                        </Form.Group>\n                        <input type=\"submit\"\n                        />\n                    </Form>\n                    <br />\n                    <Form.Group>\n                        <Form.Label>\n                            Enter what information you would like to see\n                        </Form.Label>\n                        <Form.Control as=\"select\"\n                                onChange={this.handleChange}\n                                id=\"seeOtherCPM\"\n                                type=\"text\"\n                                name=\"seeOtherCPM\"\n                                value={this.state.seeOtherCPM}\n                            >\n                                <option name=\"seeOtherCPM\">-Choose one of the below-</option>\n                                <option name=\"seeOtherCPM\">Average for 10k miles</option>\n                                <option name=\"seeOtherCPM\">Average for 15k miles</option>\n                                <option name=\"seeOtherCPM\">Average for 20k miles</option>\n                        </Form.Control>\n\n                    </Form.Group>\n                    <Table striped bordered hover>\n                        <thead>\n                            <tr>\n                                <th>Cost per mile of</th>\n                                <th>Cost per mile ($)</th>\n                                <th>Cost per mile in relation to You</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>You</td>\n                                <td>{this.state.costpermile.toFixed(2)}</td>\n                                <td>{(this.state.costpermile - this.state.costpermile).toFixed(2)}</td>\n                            </tr>\n \n                            {this.renderListElement(\"Average US Driver who drives 10k miles\", 0,79)}\n                            {this.renderListElement(\"Average US Driver who drives 15k miles\",0.61)}\n                            {this.renderListElement(\"Average US Driver who drives 20k mile\",0.53)}\n\n                            {this.renderListElement(\"Average US Driver who drives a Small Sedan (10k miles)\", 0.61)}\n                            {this.renderListElement(\"Average US Driver who drives a Medium Sedan (10k miles)\", 0.75)}\n                            {this.renderListElement(\"Average US Driver who drives a Large Sedan (10k miles)\",0.90)}\n                            {this.renderListElement(\"Average US Driver who drives a Small SUV (10k miles)\",0.71)}\n                            {this.renderListElement(\"Average US Driver who drives a Medium SUV (10k miles)\",0.87)}\n                            {this.renderListElement(\"Average US Driver who drives a Minivan (10k miles)\", 0.87)}\n                            {this.renderListElement(\"Average US Driver who drives a Hybrid Vehicle (10k miles)\",0.68)}\n                            {this.renderListElement(\"Average US Driver who drives an Electric Vehicle (10k miles\", 0.75)}\n                            \n                        </tbody>\n                    </Table>\n\n\n                </Jumbotron>\n            </Container>\n        );\n    }\n}\n\nReactDOM.render(\n    <Calculator />,\n    document.getElementById(\"root\")\n);\n"]},"metadata":{},"sourceType":"module"}