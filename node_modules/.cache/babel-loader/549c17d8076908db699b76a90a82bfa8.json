{"ast":null,"code":"var _jsxFileName = \"/Users/alexhoang/ReactProjects/calculator/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Button from 'react-bootstrap/Button';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Toast from 'react-bootstrap/Toast';\nimport Container from 'react-bootstrap/Container';\nimport { Form } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      costpermile: 0,\n      iPaid: \"\",\n      gPaid: \"\",\n      miles: \"\",\n      mait: \"\",\n      originalPrice: \"\",\n      finalPrice: \"\",\n      tolls: \"\",\n      statecode: \"\",\n      mpg: \"\",\n      subscriptions: \"\",\n      gallon: \"\",\n      typeOfGas: \"gasoline\",\n      priceOfGas: \"\",\n      city: \"\",\n      carType: \"Small Sedan\",\n      depreciationValue: \"\",\n      fullcharge: \"\",\n      fullchargeCost: \"\",\n      zipcode: \"\"\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n  /*\n   <option name=\"carType\">Small Sedan</option>\n                                  <option name=\"carType\">Medium Sedan</option>\n                                  <option name=\"carType\">Large Sedan</option>\n                                  <option name=\"carType\">Small SUV (FWD)</option>\n                                  <option name=\"carType\">Medium SUV (4WD)</option>\n                                  <option name=\"carType\">Minivan</option>\n                                  <option name=\"carType\">Hybrid Vehicle</option>\n                                  <option name=\"carType\">Electric Vehicle</option>\n  */\n\n\n  depreciate(cartype) {\n    let depreciation;\n\n    if (cartype === \"Small Sedan\") {\n      depreciation = 2240 * (this.statemiles / 15000);\n    } else if (cartype === \"Medium Sedan\") {\n      depreciation = 3169 * (this.state.miles / 15000);\n    } else if (cartype === \"Large Sedan\") {\n      depreciation = 4061 * (this.state.miles / 15000);\n    } else if (cartype === \"Small SUV (FWD)\") {\n      depreciation = 3132 * (this.state.miles / 15000);\n    } else if (cartype === \"Medium SUV (4WD)\") {\n      depreciation = 3794 * (this.state.miles / 15000);\n    } else if (cartype === \"Minivan\") {\n      depreciation = 4036 * (this.state.miles / 15000);\n    } else if (cartype === \"Hybrid Vehicle\") {\n      depreciation = 3087 * (this.state.miles / 15000);\n    } else if (cartype === \"Electric Vehicle\") {\n      depreciation = 5250 * (this.state.miles / 15000);\n    }\n\n    this.setState({\n      depreciationValue: depreciation\n    });\n  }\n\n  handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    this.setState({\n      [name]: value\n    });\n    console.log(this.state);\n  }\n\n  handleClick(e) {\n    this.getZIP(this.state.zipcode);\n    console.log(this.state);\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.depreciate(this.state.carType); //this.getZIP(this.state.zipcode);\n    //wait\n\n    this.getData(this.state.statecode);\n    let final;\n\n    if (this.state.mpg.length > 0) {\n      final = (parseInt(this.state.depreciationValue) + parseInt(this.state.iPaid) + this.state.miles * 52 / this.state.mpg * this.state.gallon + parseInt(this.state.mait) + parseInt(this.state.tolls) * 12 + parseInt(this.state.subscriptions)) / (parseInt(this.state.miles) * 52);\n    } else {\n      final = (parseInt(this.state.depreciationValue) + parseInt(this.state.iPaid) + parseInt(this.state.miles) / parseInt(this.state.fullcharge) * this.state.fullChargeCost + parseInt(this.state.mait) + parseInt(this.state.tolls) * 12 + parseInt(this.state.subscriptions)) / (parseInt(this.state.miles) * 52);\n    }\n\n    this.setState({\n      costpermile: final\n    });\n  }\n\n  getZIP(zip) {\n    const http = require(\"https\");\n\n    const options = {\n      \"method\": \"GET\",\n      \"hostname\": \"redline-redline-zipcode.p.rapidapi.com\",\n      \"port\": null,\n      \"path\": \"/rest/info.json/\" + this.state.zipcode + \"/degrees\",\n      \"headers\": {\n        \"x-rapidapi-key\": \"73d45d6313mshd16f17ab16d3fe8p1368ecjsn7f132604eddb\",\n        \"x-rapidapi-host\": \"redline-redline-zipcode.p.rapidapi.com\",\n        \"useQueryString\": true\n      }\n    };\n    var self = this;\n    const req = http.request(options, function (res) {\n      const chunks = [];\n      res.on(\"data\", function (chunk) {\n        chunks.push(chunk);\n      });\n      res.on(\"end\", function () {\n        const body = Buffer.concat(chunks);\n        var bodyJSON = JSON.parse(body.toString());\n        console.log(bodyJSON);\n        self.setState({\n          statecode: bodyJSON.state,\n          city: bodyJSON.city\n        });\n      });\n    });\n    req.end();\n  }\n\n  getData(state) {\n    var http = require(\"https\");\n\n    var options = {\n      \"method\": \"GET\",\n      \"hostname\": \"api.collectapi.com\",\n      \"port\": null,\n      \"path\": \"/gasPrice/stateUsaPrice?state=\" + state.toUpperCase(),\n      \"headers\": {\n        \"content-type\": \"application/json\",\n        \"authorization\": \"apikey 6jwMhjlXWz2rcXdhdpLjz6:4X6MQAYjbRiFWwNAxcc5k1\"\n      }\n    };\n    var self = this;\n    var req = http.request(options, function (res) {\n      var chunks = [];\n      res.on(\"data\", function (chunk) {\n        chunks.push(chunk);\n      });\n      res.on(\"end\", function () {\n        var body = Buffer.concat(chunks);\n        var bodyJSON = JSON.parse(body.toString());\n        console.log(bodyJSON);\n        console.log(self.state.typeOfGas);\n        var city = bodyJSON.result.cities.filter(x => x.name.toLowerCase() === self.state.city.toLowerCase());\n\n        if (city.length > 0) {\n          console.log(city[0][self.state.typeOfGas]);\n          self.setState({\n            gallon: city[0][self.state.typeOfGas]\n          });\n        }\n      });\n    });\n    req.end();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Jumbotron, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Cost Per Mile Calculator\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Fill out these questions to the best of your abilitiy as they are the basis of calculating your cost per mile. You will be asked about information that you may not know about some of these questions so fill them out to the best of your ability.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Jumbotron, {\n        children: [/*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: this.handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"How many miles do you usually drive per week?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"number\",\n              placeholder: \"miles driven\",\n              onChange: this.handleChange,\n              id: \"miles\",\n              type: \"number\",\n              name: \"miles\",\n              value: this.state.miles\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n              className: \"text-muted\",\n              children: \"Enter the miles you usually drive per week\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"How much have you paid for insurance a year?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              placeholder: \"$insurance this year\",\n              onChange: this.handleChange,\n              id: \"insurance\",\n              type: \"number\",\n              name: \"iPaid\",\n              value: this.state.iPaid\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"How much have you paid for maitenance a year?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              placeholder: \"$maitenance this year\",\n              onChange: this.handleChange,\n              id: \"maitenance\",\n              type: \"number\",\n              name: \"mait\",\n              value: this.state.mait\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"How much do you pay for tolls every month?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              placeholder: \"tolls\",\n              onChange: this.handleChange,\n              id: \"tolls\",\n              type: \"number\",\n              name: \"tolls\",\n              value: this.state.tolls\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"What gas do you use?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 394,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              as: \"select\",\n              onChange: this.handleChange,\n              id: \"typeOfGas\",\n              type: \"text\",\n              name: \"typeOfGas\",\n              value: this.state.typeOfGas,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                name: \"typeOfGas\",\n                children: \" gasoline\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 407,\n                columnNumber: 42\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                name: \"typeOfGas\",\n                children: \"midGrade\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 408,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                name: \"typeOfGas\",\n                children: \" premium\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 409,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                name: \"typeOfGas\",\n                children: \" diesel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 410,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 399,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n              children: \"You do not have to answer this question if you are an electric car user\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 412,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 392,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"What is your MPG(Miles Per Gallon)?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 419,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              placeholder: \"mpg\",\n              onChange: this.handleChange,\n              id: \"mpg\",\n              type: \"number\",\n              name: \"mpg\",\n              value: this.state.mpg\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 423,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n              children: \"You do not have to answer this question if you are an electric car user\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 431,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 31\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"If you drive an electric vehicle, how far can you drive on a full charge in miles?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 438,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              placeholder: \"fullcharge\",\n              onChange: this.handleChange,\n              id: \"fullcharge\",\n              type: \"number\",\n              name: \"fullcharge\",\n              value: this.state.fullcharge\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 442,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n              children: \"You do not have to answer this question if you are a gas car user\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 450,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 437,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"If you drive an electric vehicle, how much does it cost for a full charge?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 456,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              placeholder: \"fullchargeCost\",\n              onChange: this.handleChange,\n              id: \"fullchargeCost\",\n              type: \"number\",\n              name: \"fullchargeCost\",\n              value: this.state.fullchargeCost\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 460,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n              children: \"You do not have to answer this question if you are a gas car user\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 468,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 455,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"What is your zip code?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 475,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              placeholder: \"zip code\",\n              onChange: this.handleChange,\n              id: \"zipcode\",\n              type: \"number\",\n              name: \"zipcode\",\n              value: this.state.zipcode\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 479,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"primary\",\n            onClick: this.handleClick,\n            children: \"submit your zipcode!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 490,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 496,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: this.state.city.length > 0 ? \"Your city, state is \" + this.state.city + \", \" + this.state.statecode : \"Enter the question above to accurately see your zip code!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 499,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 504,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"How much do you pay for subscriptions?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 507,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              placeholder: \"subscriptions\",\n              onChange: this.handleChange,\n              id: \"subscriptions\",\n              type: \"number\",\n              name: \"subscriptions\",\n              value: this.state.subscriptions\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 510,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 506,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"What type of car do you use\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 525,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              as: \"select\",\n              onChange: this.handleChange,\n              id: \"carType\",\n              type: \"text\",\n              name: \"carType\",\n              value: this.state.carType,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                name: \"carType\",\n                children: \"Small Sedan\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 537,\n                columnNumber: 38\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                name: \"carType\",\n                children: \"Medium Sedan\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 538,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                name: \"carType\",\n                children: \"Large Sedan\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 539,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                name: \"carType\",\n                children: \"Small SUV (FWD)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 540,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                name: \"carType\",\n                children: \"Medium SUV (4WD)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 541,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                name: \"carType\",\n                children: \"Minivan\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 542,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                name: \"carType\",\n                children: \"Hybrid Vehicle\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 543,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                name: \"carType\",\n                children: \"Electric Vehicle\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 544,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 530,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n              children: \"This calculates your depreciation value\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 546,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 523,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 556,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 559,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Cost per mile: $ \", this.state.costpermile.toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 561,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(Calculator, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 572,\n  columnNumber: 5\n}, this), document.getElementById(\"root\"));","map":{"version":3,"sources":["/Users/alexhoang/ReactProjects/calculator/src/index.js"],"names":["React","ReactDOM","Button","Jumbotron","Toast","Container","Form","Calculator","Component","constructor","props","state","costpermile","iPaid","gPaid","miles","mait","originalPrice","finalPrice","tolls","statecode","mpg","subscriptions","gallon","typeOfGas","priceOfGas","city","carType","depreciationValue","fullcharge","fullchargeCost","zipcode","handleChange","bind","handleSubmit","handleClick","depreciate","cartype","depreciation","statemiles","setState","event","name","value","target","console","log","e","getZIP","preventDefault","getData","final","length","parseInt","fullChargeCost","zip","http","require","options","self","req","request","res","chunks","on","chunk","push","body","Buffer","concat","bodyJSON","JSON","parse","toString","end","toUpperCase","result","cities","filter","x","toLowerCase","render","toFixed","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport Button from 'react-bootstrap/Button';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Toast from 'react-bootstrap/Toast';\nimport Container from 'react-bootstrap/Container';\nimport { Form } from 'react-bootstrap';\n\nclass Calculator extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            costpermile:0,\n            iPaid:\"\",\n            gPaid:\"\",\n            miles:\"\",\n            mait:\"\",\n            originalPrice:\"\",\n            finalPrice:\"\",\n            tolls: \"\",\n            statecode: \"\",\n            mpg:\"\",\n            subscriptions: \"\",\n            gallon: \"\",\n            typeOfGas: \"gasoline\",\n            priceOfGas: \"\",\n            city: \"\",\n            carType: \"Small Sedan\",\n            depreciationValue: \"\",\n            fullcharge: \"\",\n            fullchargeCost: \"\",\n            zipcode: \"\",\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n        \n    }\n    /*\n     <option name=\"carType\">Small Sedan</option>\n                                    <option name=\"carType\">Medium Sedan</option>\n                                    <option name=\"carType\">Large Sedan</option>\n                                    <option name=\"carType\">Small SUV (FWD)</option>\n                                    <option name=\"carType\">Medium SUV (4WD)</option>\n                                    <option name=\"carType\">Minivan</option>\n                                    <option name=\"carType\">Hybrid Vehicle</option>\n                                    <option name=\"carType\">Electric Vehicle</option>\n    */\n    depreciate(cartype){\n        let depreciation\n        if(cartype === \"Small Sedan\"){\n            depreciation = 2240 * (this.statemiles/15000)\n        }\n        else if(cartype ===\"Medium Sedan\"){\n            depreciation = 3169 * (this.state.miles/15000)\n        }\n        else if(cartype ===\"Large Sedan\"){\n            depreciation = 4061 * (this.state.miles/15000)\n        }\n        else if(cartype ===\"Small SUV (FWD)\"){\n            depreciation = 3132 * (this.state.miles/15000)\n        }\n        else if(cartype ===\"Medium SUV (4WD)\"){\n            depreciation = 3794 * (this.state.miles/15000)\n        }\n        else if(cartype ===\"Minivan\"){\n            depreciation = 4036 * (this.state.miles/15000)\n        }\n        else if(cartype ===\"Hybrid Vehicle\"){\n            depreciation = 3087 * (this.state.miles/15000)\n        }\n        else if(cartype ===\"Electric Vehicle\"){\n            depreciation = 5250 * (this.state.miles/15000)\n        }\n        this.setState({\n            depreciationValue: depreciation,\n        })\n    }\n    handleChange(event) {\n        const {name,value} = event.target\n        this.setState({\n            [name]: value,\n        });\n        console.log(this.state);\n    }\n    handleClick(e){\n        this.getZIP(this.state.zipcode);\n        console.log(this.state);\n    }\n    handleSubmit(e) {\n        e.preventDefault();\n        this.depreciate(this.state.carType);\n        //this.getZIP(this.state.zipcode);\n\n        //wait\n        \n        this.getData(this.state.statecode);\n        \n        let final;\n         \n        if(this.state.mpg.length> 0){\n            final = (parseInt(this.state.depreciationValue) + \n            parseInt(this.state.iPaid) + \n            (((this.state.miles * 52)/ this.state.mpg) * this.state.gallon) + \n            parseInt(this.state.mait) + \n            (parseInt(this.state.tolls) * 12) + \n            parseInt(this.state.subscriptions))\n            /(parseInt(this.state.miles) * 52);\n        }else{\n            final = (parseInt(this.state.depreciationValue) + \n                parseInt(this.state.iPaid) + \n                ((parseInt(this.state.miles)/parseInt(this.state.fullcharge)) * this.state.fullChargeCost) + \n                parseInt(this.state.mait) + \n                (parseInt(this.state.tolls) * 12) + \n                parseInt(this.state.subscriptions))/\n                (parseInt(this.state.miles) * 52);\n\n        }\n\n        this.setState(\n            {costpermile: final\n        })\n    }\n    getZIP(zip){\n        const http = require(\"https\");\n\n        const options = {\n            \"method\": \"GET\",\n            \"hostname\": \"redline-redline-zipcode.p.rapidapi.com\",\n            \"port\": null,\n            \"path\": \"/rest/info.json/\" + this.state.zipcode + \"/degrees\",\n            \"headers\": {\n                \"x-rapidapi-key\": \"73d45d6313mshd16f17ab16d3fe8p1368ecjsn7f132604eddb\",\n                \"x-rapidapi-host\": \"redline-redline-zipcode.p.rapidapi.com\",\n                \"useQueryString\": true\n            }\n        };\n        var self = this;\n        const req = http.request(options, function (res) {\n            const chunks = [];\n\n            res.on(\"data\", function (chunk) {\n                chunks.push(chunk);\n            });\n\n            res.on(\"end\", function () {\n                const body = Buffer.concat(chunks);\n                \n                var bodyJSON = JSON.parse(body.toString());\n                console.log(bodyJSON);\n                self.setState({\n                    statecode: bodyJSON.state,\n                    city: bodyJSON.city,\n                })\n            });\n        });\n\n        req.end();\n    }\n\n    getData(state){\n\n        \n        var http = require(\"https\");\n\n        var options = {\n          \"method\": \"GET\",\n          \"hostname\": \"api.collectapi.com\",\n          \"port\": null,\n          \"path\": \"/gasPrice/stateUsaPrice?state=\" + state.toUpperCase(),\n          \"headers\": {\n            \"content-type\": \"application/json\",\n            \"authorization\": \"apikey 6jwMhjlXWz2rcXdhdpLjz6:4X6MQAYjbRiFWwNAxcc5k1\"\n          }\n        };\n        var self = this;\n        var req = http.request(options, function (res) {\n          var chunks = [];\n        \n          res.on(\"data\", function (chunk) {\n            chunks.push(chunk);\n          });\n        \n          res.on(\"end\", function () {\n            var body = Buffer.concat(chunks);\n            var bodyJSON = JSON.parse(body.toString());\n            console.log(bodyJSON);\n            console.log(self.state.typeOfGas);\n            var city = bodyJSON.result.cities.filter((x) =>x.name.toLowerCase() === self.state.city.toLowerCase());\n            if(city.length>0){\n                console.log(city[0][self.state.typeOfGas]);\n                self.setState({\n                    gallon: city[0][self.state.typeOfGas]\n                })\n            }\n            \n          });\n        });\n        \n        req.end();\n        \n\n    }\n    render(){\n        \n        return(\n            <Container>\n                \n                <Jumbotron>\n                    <h1>\n                    Cost Per Mile Calculator\n                    \n                    </h1>\n                    <p>\n                        Fill out these questions to the best of your abilitiy as they are the basis of calculating your cost per mile. You will be asked about information that you may not know about some of these questions so fill them out to the best of your ability.\n                    </p>\n                </Jumbotron>\n                <Jumbotron>\n             \n                    \n                    <Form onSubmit = {this.handleSubmit}>\n                                <Form.Group>\n                                    \n                                    <Form.Label>\n                                        How many miles do you usually drive per week?\n                                    </Form.Label>\n\n                                    <Form.Control type=\"number\"\n                                    placeholder = \"miles driven\"\n                                    onChange={this.handleChange}\n                                    id = \"miles\"\n                                    type = \"number\" \n                                    name = \"miles\"\n                                    value = {this.state.miles}  \n                                    />\n                                    <Form.Text className=\"text-muted\">\n                                        Enter the miles you usually drive per week\n                                    </Form.Text>\n\n\n                                </Form.Group>\n\n\n\n                                <Form.Group> \n                                    \n                                        <Form.Label>\n                                            How much have you paid for insurance a year?\n                                        </Form.Label>\n                                                                  \n                                   \n                                        <Form.Control\n                                        placeholder = \"$insurance this year\"\n                                        onChange={this.handleChange}                                    \n                                        id = \"insurance\"\n                                        type = \"number\" \n                                        name = \"iPaid\"\n                                        value = {this.state.iPaid}\n                                        />\n                                  \n                                </Form.Group>\n                               \n                                \n\n                                <Form.Group> \n                                    \n                                        <Form.Label>\n                                          How much have you paid for maitenance a year?\n                                        </Form.Label>\n                                                                  \n                                    \n                                    <Form.Control\n                                        placeholder = \"$maitenance this year\"\n                                        onChange={this.handleChange}                                    \n                                        id = \"maitenance\"\n                                        type = \"number\" \n                                        name = \"mait\"\n                                        value = {this.state.mait}\n                                    />\n                              \n                                </Form.Group>\n\n\n                                <Form.Group> \n                                        <Form.Label>\n                                            How much do you pay for tolls every month?\n                                        </Form.Label>\n                                                         \n                         \n                                    <Form.Control\n                                        placeholder = \"tolls\"\n                                        onChange={this.handleChange}                                    \n                                        id = \"tolls\"\n                                        type = \"number\" \n                                        name = \"tolls\"\n                                        value = {this.state.tolls}\n                                    />\n                                </Form.Group>\n\n\n\n                        {   /*     <Form.Group> \n                                  \n                                        <Form.Label>\n                                            What is your state code?\n                                        </Form.Label>\n                                    \n                                    <Form.Control as = \"select\"\n                                        \n                                        onChange={this.handleChange}                                    \n                                        id = \"statecode\"\n                                        type = \"text\" \n                                        name = \"statecode\"\n                                        value = {this.state.statecode}\n                                    >\n                                        <option name = \"statecode\">AL</option>\n                                        <option name = \"statecode\">AK</option>\n                                        <option name = \"statecode\">AZ</option>\n                                        <option name = \"statecode\">AR</option>\n                                        <option name = \"statecode\">CA</option>\n                                        <option name = \"statecode\">CO</option>\n                                        <option name = \"statecode\">CT</option>\n                                        <option name = \"statecode\">DE</option>\n                                        <option name = \"statecode\">DC</option>\n                                        <option name = \"statecode\">FL</option>\n                                        <option name = \"statecode\">GA</option>\n                                        <option name = \"statecode\">HI</option>\n                                        <option name = \"statecode\">ID</option>\n                                        <option name = \"statecode\">IN</option>\n                                        <option name = \"statecode\">IA</option>\n                                        <option name = \"statecode\">KS</option>\n                                        <option name = \"statecode\">KY</option>\n                                        <option name = \"statecode\">LA</option>\n                                        <option name = \"statecode\">ME</option>\n                                        <option name = \"statecode\">MD</option>\n                                        <option name = \"statecode\">MA</option>\n                                        <option name = \"statecode\">MI</option>\n                                        <option name = \"statecode\">MN</option>\n                                        <option name = \"statecode\">MS</option>\n                                        <option name = \"statecode\">MO</option>\n                                        <option name = \"statecode\">MT</option>\n                                        <option name = \"statecode\">NE</option>\n                                        <option name = \"statecode\">NV</option>\n                                        <option name = \"statecode\">NH</option>\n                                        <option name = \"statecode\">NJ</option>\n                                        <option name = \"statecode\">NM</option>\n                                        <option name = \"statecode\">NY</option>\n                                        <option name = \"statecode\">NC</option>\n                                        <option name = \"statecode\">ND</option>\n                                        <option name = \"statecode\">OH</option>\n                                        <option name = \"statecode\">OK</option>\n                                        <option name = \"statecode\">OR</option>\n                                        <option name = \"statecode\">PA</option>\n                                        <option name = \"statecode\">RI</option>\n                                        <option name = \"statecode\">SC</option>\n                                        <option name = \"statecode\">SD</option>\n                                        <option name = \"statecode\">TN</option>\n                                        <option name = \"statecode\">TX</option>\n                                        <option name = \"statecode\">UT</option>\n                                        <option name = \"statecode\">VT</option>\n                                        <option name = \"statecode\">VA</option>\n                                        <option name = \"statecode\">WA</option>\n                                        <option name = \"statecode\">WV</option>\n                                        <option name = \"statecode\">WI</option>\n                                        <option name = \"statecode\">WY</option>\n                                    </Form.Control>\n                                    \n                                </Form.Group>\n\n                                  <Form.Group> \n                                    \n                                        <Form.Label>\n                                            City you live in?\n                                        </Form.Label>\n                                                         \n                              \n                                    <Form.Control\n                                        placeholder = \"city\"\n                                        onChange={this.handleChange}                                    \n                                        id = \"city\"\n                                        type = \"text\" \n                                        name = \"city\"\n                                        value = {this.state.city}\n                                    />\n                                    \n                                </Form.Group>\n   */ }\n\n                                <Form.Group> \n                                    \n                                        <Form.Label>\n                                            What gas do you use?\n                                        </Form.Label>\n                                                                \n                                    \n                                    <Form.Control as= \"select\"\n                                        \n                                        onChange={this.handleChange}                                    \n                                        id = \"typeOfGas\"\n                                        type = \"text\" \n                                        name = \"typeOfGas\"\n                                        value = {this.state.typeOfGas}\n                                    >\n                                         <option name=\"typeOfGas\"> gasoline</option>\n                                        <option name=\"typeOfGas\">midGrade</option>\n                                        <option name=\"typeOfGas\"> premium</option>\n                                        <option name=\"typeOfGas\"> diesel</option>\n                                    </Form.Control>\n                                    <Form.Text>\n                                        You do not have to answer this question if you are an electric car user\n                                    </Form.Text>\n                                 </Form.Group>\n\n\n                              <Form.Group>\n                                        <Form.Label>\n                                            What is your MPG(Miles Per Gallon)?\n                                        </Form.Label>\n                                    \n                                    <Form.Control\n                                        placeholder = \"mpg\"\n                                        onChange={this.handleChange}                                    \n                                        id = \"mpg\"\n                                        type = \"number\" \n                                        name = \"mpg\"\n                                        value = {this.state.mpg}\n                                    />\n                                    <Form.Text>\n                                        You do not have to answer this question if you are an electric car user\n                                    </Form.Text>\n                            </Form.Group>\n\n\n                            <Form.Group>\n                                        <Form.Label>\n                                            If you drive an electric vehicle, how far can you drive on a full charge in miles?\n                                        </Form.Label>\n                                    \n                                    <Form.Control\n                                        placeholder = \"fullcharge\"\n                                        onChange={this.handleChange}                                    \n                                        id = \"fullcharge\"\n                                        type = \"number\" \n                                        name = \"fullcharge\"\n                                        value = {this.state.fullcharge}\n                                    />\n                                    <Form.Text>\n                                        You do not have to answer this question if you are a gas car user\n                                    </Form.Text>\n                            </Form.Group>\n\n                            <Form.Group>\n                                        <Form.Label>\n                                            If you drive an electric vehicle, how much does it cost for a full charge?\n                                        </Form.Label>\n                                    \n                                    <Form.Control\n                                        placeholder = \"fullchargeCost\"\n                                        onChange={this.handleChange}                                    \n                                        id = \"fullchargeCost\"\n                                        type = \"number\" \n                                        name = \"fullchargeCost\"\n                                        value = {this.state.fullchargeCost}\n                                    />\n                                    <Form.Text>\n                                        You do not have to answer this question if you are a gas car user\n                                    </Form.Text>\n                            </Form.Group>\n\n\n                            <Form.Group>\n                                        <Form.Label>\n                                            What is your zip code?\n                                        </Form.Label>\n                                    \n                                    <Form.Control\n                                        placeholder = \"zip code\"\n                                        onChange={this.handleChange}                                    \n                                        id = \"zipcode\"\n                                        type = \"number\" \n                                        name = \"zipcode\"\n                                        value = {this.state.zipcode}\n                                    />\n                                   \n                            </Form.Group>\n\n                            <Button\n                            variant = \"primary\"\n                            onClick = {this.handleClick}\n                            >\n                                submit your zipcode!\n                            </Button>\n                            <br/>\n\n                            \n                            <label>\n                                {this.state.city.length>0? \"Your city, state is \" + this.state.city + \", \" + this.state.statecode :\"Enter the question above to accurately see your zip code!\"}\n                            </label>\n                           \n                            \n                            <br/>\n\n                                <Form.Group>\n                                        <Form.Label>\n                                            How much do you pay for subscriptions?\n                                        </Form.Label>\n                                    <Form.Control\n                                        placeholder = \"subscriptions\"\n                                        onChange={this.handleChange}                                    \n                                        id = \"subscriptions\"\n                                        type = \"number\" \n                                        name = \"subscriptions\"\n                                        value = {this.state.subscriptions}\n                                    />\n                                    \n                            \n                            </Form.Group>\n\n\n                            <Form.Group> \n                                    \n                                    <Form.Label>\n                                        What type of car do you use\n                                    </Form.Label>\n                                                            \n                                \n                                <Form.Control as= \"select\"\n                                    onChange={this.handleChange}                                    \n                                    id = \"carType\"\n                                    type = \"text\" \n                                    name = \"carType\"\n                                    value = {this.state.carType}\n                                >\n                                     <option name=\"carType\">Small Sedan</option>\n                                    <option name=\"carType\">Medium Sedan</option>\n                                    <option name=\"carType\">Large Sedan</option>\n                                    <option name=\"carType\">Small SUV (FWD)</option>\n                                    <option name=\"carType\">Medium SUV (4WD)</option>\n                                    <option name=\"carType\">Minivan</option>\n                                    <option name=\"carType\">Hybrid Vehicle</option>\n                                    <option name=\"carType\">Electric Vehicle</option>\n                                </Form.Control>\n                                <Form.Text>\n                                    This calculates your depreciation value\n                                </Form.Text>\n                             </Form.Group>\n\n                               \n\n                                \n\n\n                                <input type = \"submit\" />\n                            </Form>\n                        \n                    <br/>\n\n                    <h2>\n                        Cost per mile: $ { this.state.costpermile.toFixed(2) }\n                    </h2>\n                    \n                </Jumbotron>\n            </Container>\n        );\n    }\n}\n\nReactDOM.render(\n    <Calculator />,\n    document.getElementById(\"root\")\n  );\n"]},"metadata":{},"sourceType":"module"}