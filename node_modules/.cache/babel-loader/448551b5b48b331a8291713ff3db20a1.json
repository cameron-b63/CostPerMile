{"ast":null,"code":"var _jsxFileName = \"/Users/alexhoang/ReactProjects/CostPerMile/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './carmakes.json';\nimport Button from 'react-bootstrap/Button';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Toast from 'react-bootstrap/Toast';\nimport Container from 'react-bootstrap/Container';\nimport { Form } from 'react-bootstrap';\nimport { Table } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction compare(a, b) {\n  const nameA = a.Make_Name;\n  const nameB = b.Make_Name;\n  let comparison = 0;\n\n  if (nameA > nameB) {\n    comparison = 1;\n  } else if (nameA < nameB) {\n    comparison = -1;\n  }\n\n  return comparison;\n}\n\nclass Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      costpermile: 0,\n      iPaid: \"\",\n      miles: \"\",\n      mait: \"\",\n      api: require('./carmakes.json')[\"Results\"].sort(compare),\n      models: [],\n      originalPrice: \"\",\n      finalPrice: \"\",\n      tolls: \"\",\n      statecode: \"\",\n      mpg: \"\",\n      subscriptions: \"\",\n      gallon: \"\",\n      typeOfGas: \"gasoline\",\n      priceOfGas: \"\",\n      city: \"\",\n      VIN: \"\",\n      VINAPI: \"\",\n      depreciationValue: \"\",\n      fullcharge: \"\",\n      fullchargeCost: \"\",\n      zipcode: \"\",\n      carMake: \"-\",\n      carModel: \"\",\n      isElectric: \"\",\n      carYear: \"\",\n      carBasePrice: \"\",\n      seeOtherCPM: \"\"\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  depreciate() {\n    let depreciation = (parseInt(this.state.originalPrice) - parseInt(this.state.finalPrice)) / (2021 - parseInt(this.state.carYear));\n    this.setState({\n      depreciationValue: depreciation\n    });\n  }\n\n  handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    this.setState({\n      [name]: value\n    });\n    console.log(this.state);\n  }\n\n  handleClick(e) {\n    this.getVIN(this.state.VIN);\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.depreciate();\n    this.getZIP(this.state.zipcode);\n\n    if (this.state.mpg.length > 0) {\n      this.getData(this.state.statecode);\n    }\n\n    let final;\n\n    if (this.state.mpg.length > 0) {\n      final = (parseInt(this.state.depreciationValue) + parseInt(this.state.iPaid) + this.state.miles * 52 / this.state.mpg * this.state.gallon + parseInt(this.state.mait) + parseInt(this.state.tolls) * 12 + parseInt(this.state.subscriptions)) / (parseInt(this.state.miles) * 52);\n    } else {\n      final = (parseInt(this.state.depreciationValue) + parseInt(this.state.iPaid) + parseInt(this.state.miles) / parseInt(this.state.fullcharge) * parseInt(this.state.fullchargeCost) + parseInt(this.state.mait) + parseInt(this.state.tolls) * 12 + parseInt(this.state.subscriptions)) / (parseInt(this.state.miles) * 52);\n    }\n\n    this.setState({\n      costpermile: final\n    });\n  }\n\n  getVIN(vin) {\n    var make;\n    var model;\n    var modelYear;\n    var basePrice;\n    var fuelType;\n\n    if (vin.length > 0) {\n      fetch('https://vpic.nhtsa.dot.gov/api/vehicles/decodevin/' + this.state.VIN + '?format=json&modelyear=').then(response => response.json()).then(data => {\n        this.setState({\n          VINAPI: data[\"Results\"]\n        });\n\n        if (this.state.VINAPI.length > 0) {\n          make = this.state.VINAPI.filter(x => x.Variable === \"Make\")[0].Value;\n          model = this.state.VINAPI.filter(x => x.Variable === \"Model\")[0].Value;\n          modelYear = this.state.VINAPI.filter(x => x.Variable === \"Model Year\")[0].Value;\n          basePrice = this.state.VINAPI.filter(x => x.Variable === \"Base Price ($)\")[0].Value;\n          fuelType = this.state.VINAPI.filter(x => x.Variable === \"Fuel Type - Primary\")[0].Value;\n\n          if (make === null || make === \"Not Applicable\") {\n            console.log(\"make is null\");\n          }\n\n          if (model === null || make === \"Not Applicable\") {\n            console.log(\"model is null\");\n          }\n\n          if (modelYear === null || make === \"Not Applicable\") {\n            console.log(\"modelYear is null\");\n          }\n\n          if (basePrice === null || make === \"Not Applicable\") {\n            console.log(\"basePrice is null\");\n          }\n\n          if (fuelType === null || make === \"Not Applicable\") {\n            console.log(\"fuelType is null\");\n          }\n\n          if (fuelType !== null) {\n            if (fuelType.indexOf(\"as\") > 0) {\n              fuelType = \"gas\";\n            } else {\n              fuelType = \"electric\";\n            }\n          } else {\n            fuelType = \"\";\n          }\n\n          this.setState({\n            carMake: make,\n            carModel: model,\n            carYear: modelYear,\n            carBasePrice: basePrice,\n            isElectric: fuelType\n          });\n          console.log(this.state);\n        }\n      });\n    }\n  }\n\n  getZIP(zip) {\n    if (zip.length > 0) {\n      const options = {\n        \"method\": \"GET\",\n        \"hostname\": \"redline-redline-zipcode.p.rapidapi.com\",\n        \"port\": null,\n        \"path\": \"/rest/info.json/\" + this.state.zipcode + \"/degrees\",\n        \"headers\": {\n          \"x-rapidapi-key\": \"73d45d6313mshd16f17ab16d3fe8p1368ecjsn7f132604eddb\",\n          \"x-rapidapi-host\": \"redline-redline-zipcode.p.rapidapi.com\",\n          \"useQueryString\": true\n        }\n      };\n      /*var obj = {  \n          method: 'GET',\n          \n          \"port\": null,\n          \"path\": \"/rest/info.json/\" + this.state.zipcode + \"/degrees\",\n          headers: {\n              \"x-rapidapi-key\": \"73d45d6313mshd16f17ab16d3fe8p1368ecjsn7f132604eddb\",\n              \"x-rapidapi-host\": \"redline-redline-zipcode.p.rapidapi.com\",\n              \"useQueryString\": true\n          },\n          \n      };\n      fetch('redline-redline-zipcode.p.rapidapi.com/rest/info.json/ ${this.state.zipcode}  /degrees')\n      .then(response => response.json())\n      .then(data => {\n          console.log(data.toString());\n          \n          this.setState({\n              statecode: data.state,\n              city: data.city,\n          })\n          this.getData(this.state.statecode);\n      })\n      */\n\n      const http = require(\"https\");\n\n      var self = this;\n      const req = http.request(options, function (res) {\n        const chunks = [];\n        res.on(\"data\", function (chunk) {\n          chunks.push(chunk);\n        });\n        res.on(\"end\", function () {\n          const body = Buffer.concat(chunks);\n          var bodyJSON = JSON.parse(body.toString());\n          console.log(bodyJSON);\n          self.setState({\n            statecode: bodyJSON.state,\n            city: bodyJSON.city\n          });\n          self.getData(self.state.statecode);\n        });\n      });\n      req.end();\n    }\n  }\n\n  getData(state) {\n    if (state.length > 0) {\n      /*const options = {\n          \"method\": \"GET\",\n          \n          \"port\": null,\n          \"path\": \"/gasPrice/stateUsaPrice?state=\" + state.toUpperCase(),\n          \"headers\": {\n              \"content-type\": \"application/json\",\n              \"authorization\": \"apikey 49S3NpApsO1VH7MBkPuIdl:7czVHVdiBbrpo2bR2gV987\"\n          }\n      }\n      fetch(\"api.collectapi.com\",options)\n      .then(response => response.json())\n      .then(data => {\n          console.log(data);\n          this.getData(this.state.statecode)\n      })\n      */\n      var http = require(\"https\");\n\n      var options = {\n        \"method\": \"GET\",\n        \"hostname\": \"api.collectapi.com\",\n        \"port\": null,\n        \"path\": \"/gasPrice/stateUsaPrice?state=\" + state.toUpperCase(),\n        \"headers\": {\n          \"content-type\": \"application/json\",\n          \"authorization\": \"apikey 49S3NpApsO1VH7MBkPuIdl:7czVHVdiBbrpo2bR2gV987\"\n        }\n      };\n      var self = this;\n      var req = http.request(options, function (res) {\n        var chunks = [];\n        res.on(\"data\", function (chunk) {\n          chunks.push(chunk);\n        });\n        res.on(\"end\", function () {\n          var body = Buffer.concat(chunks);\n          var bodyJSON = JSON.parse(body.toString());\n          console.log(bodyJSON);\n          console.log(self.state.typeOfGas);\n          var city = bodyJSON.result.cities.filter(x => x.name.toLowerCase() === self.state.city.toLowerCase());\n\n          if (city.length > 0) {\n            console.log(city[0][self.state.typeOfGas]);\n            self.setState({\n              gallon: city[0][self.state.typeOfGas]\n            });\n            console.log(self.state);\n          }\n        });\n      });\n      req.end();\n    }\n  }\n\n  renderListElement(stringDisplay, CPM) {\n    return /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        children: stringDisplay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: CPM\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: this.state.costpermile.toFixed(2) - CPM > 0 ? \"+\" + (this.state.costpermile.toFixed(2) - CPM).toFixed(2) : (this.state.costpermile.toFixed(2) - CPM).toFixed(2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 13\n    }, this);\n  }\n\n  render() {\n    let allOptions;\n    allOptions = this.state.api.map(num => /*#__PURE__*/_jsxDEV(\"option\", {\n      children: num.Make_Name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 50\n    }, this));\n    let allOptions2;\n    let renderCarModel;\n\n    if (this.state.carMake.length > 0) {\n      fetch('https://vpic.nhtsa.dot.gov/api/vehicles/GetModelsForMake/' + this.state.carMake + '?format=json').then(response => response.json()).then(data => {\n        this.setState({\n          models: data[\"Results\"]\n        });\n      });\n    }\n\n    var years = [];\n\n    for (var i = 0; i < 100; i++) {\n      years.push(2021 - i);\n    }\n\n    const carYears = years.map(num => /*#__PURE__*/_jsxDEV(\"option\", {\n      children: num\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 45\n    }, this));\n    allOptions2 = this.state.models.map(num => /*#__PURE__*/_jsxDEV(\"option\", {\n      children: num.Model_Name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 54\n    }, this)); //CONDITIONAL RENDERING FOR CAR MODEL BASED ON MAKE\n\n    if (this.state.carMake.indexOf(\"-\") === 0) {\n      renderCarModel = /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 31\n      }, this);\n    } else {\n      renderCarModel = /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"a. What is your car model?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            as: \"select\",\n            onChange: this.handleChange,\n            id: \"carModel\",\n            name: \"carModel\",\n            value: this.state.carModel,\n            children: allOptions2\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 17\n      }, this);\n    }\n\n    let renderThis; // CONDITIONAL RENDERING BASED ON USER CHOICE IF ELECTRIC OR NOT\n\n    if (this.state.isElectric.indexOf(\"as\") > 0) {\n      renderThis = /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"What fuel type do you use?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            as: \"select\",\n            onChange: this.handleChange,\n            id: \"typeOfGas\",\n            type: \"text\",\n            name: \"typeOfGas\",\n            value: this.state.typeOfGas,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              name: \"typeOfGas\",\n              children: \" gasoline\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 395,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              name: \"typeOfGas\",\n              children: \"midGrade\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 396,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              name: \"typeOfGas\",\n              children: \" premium\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 397,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              name: \"typeOfGas\",\n              children: \" diesel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 398,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n            children: \"Do not answer this question if you are an electric vehicle user\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 400,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 32\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"What is your MPG(Miles Per Gallon)?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 407,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            placeholder: \"Enter your mpg\",\n            onChange: this.handleChange,\n            id: \"mpg\",\n            type: \"number\",\n            name: \"mpg\",\n            value: this.state.mpg\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 411,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n            children: \"Do not answer this question if you are an electric vehicle user\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 419,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"What is your zip code?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 425,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            placeholder: \"Enter your zip code\",\n            onChange: this.handleChange,\n            id: \"zipcode\",\n            type: \"number\",\n            name: \"zipcode\",\n            value: this.state.zipcode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 429,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n            children: \"This question gets the gas prices in your area!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 437,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: this.state.city.length > 0 ? \"Your city, state is \" + this.state.city + \", \" + this.state.statecode : \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 27\n      }, this);\n    } else if (this.state.isElectric.indexOf(\"lectric\") > 0) {\n      renderThis = /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"If you drive an electric vehicle, how far can you drive on a full charge in miles?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 450,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            placeholder: \"fullcharge\",\n            onChange: this.handleChange,\n            id: \"fullcharge\",\n            type: \"number\",\n            name: \"fullcharge\",\n            value: this.state.fullcharge\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n            children: \"Do not answer this question if you are a gas vehicle user\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 462,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"If you drive an electric vehicle, how much does it cost for a full charge?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 467,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            placeholder: \"fullchargeCost\",\n            onChange: this.handleChange,\n            id: \"fullchargeCost\",\n            type: \"number\",\n            name: \"fullchargeCost\",\n            value: this.state.fullchargeCost\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 471,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n            children: \"Do not answer this question if you are a gas vehicle user\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 479,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 27\n      }, this);\n    } else {\n      renderThis = /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 17\n      }, this);\n    }\n\n    let otherCPM; //CONDITIONAL RENDERING FOR DATA SHOWN AT THE BOTTOM\n\n    if (this.state.seeOtherCPM.indexOf(\"10k\") > 0) {\n      otherCPM = /*#__PURE__*/_jsxDEV(Table, {\n        striped: true,\n        bordered: true,\n        hover: true,\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Cost per mile of\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 497,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Cost per mile ($)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 498,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Cost per mile in relation to You\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 499,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 496,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 495,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: \"Your Cost Per Mile\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 504,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: this.state.costpermile.toFixed(2)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 505,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: (this.state.costpermile - this.state.costpermile).toFixed(2)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 506,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 503,\n            columnNumber: 25\n          }, this), this.renderListElement(\"Average US Driver who drives 10k miles\", 0, 79), this.renderListElement(\"Average US Driver who drives a Small Sedan (10k miles)\", 0.61), this.renderListElement(\"Average US Driver who drives a Medium Sedan (10k miles)\", 0.75), this.renderListElement(\"Average US Driver who drives a Large Sedan (10k miles)\", 0.90), this.renderListElement(\"Average US Driver who drives a Small SUV (10k miles)\", 0.71), this.renderListElement(\"Average US Driver who drives a Medium SUV (10k miles)\", 0.87), this.renderListElement(\"Average US Driver who drives a Minivan (10k miles)\", 0.87), this.renderListElement(\"Average US Driver who drives a Hybrid Vehicle (10k miles)\", 0.68), this.renderListElement(\"Average US Driver who drives an Electric Vehicle (10k miles\", 0.75)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 502,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 17\n      }, this);\n    } else if (this.state.seeOtherCPM.indexOf(\"15k\") > 0) {\n      otherCPM = /*#__PURE__*/_jsxDEV(Table, {\n        striped: true,\n        bordered: true,\n        hover: true,\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Cost per mile of\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 529,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Cost per mile ($)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 530,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Cost per mile in relation to You\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 531,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 528,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: \"Your Cost Per Mile\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 536,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: this.state.costpermile.toFixed(2)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 537,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: (this.state.costpermile - this.state.costpermile).toFixed(2)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 538,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 535,\n            columnNumber: 25\n          }, this), this.renderListElement(\"Average US Driver who drives 15k miles\", 0.61), this.renderListElement(\"Average US Driver who drives a Small Sedan (15k miles)\", 0.47), this.renderListElement(\"Average US Driver who drives a Medium Sedan (15k miles)\", 0.58), this.renderListElement(\"Average US Driver who drives a Large Sedan (15k miles)\", 0.69), this.renderListElement(\"Average US Driver who drives a Small SUV (15k miles)\", 0.56), this.renderListElement(\"Average US Driver who drives a Medium SUV (15k miles)\", 0.68), this.renderListElement(\"Average US Driver who drives a Minivan (15k miles)\", 0.67), this.renderListElement(\"Average US Driver who drives a Hybrid Vehicle (15k miles)\", 0.52), this.renderListElement(\"Average US Driver who drives an Electric Vehicle (15k miles\", 0.55)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 534,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 17\n      }, this);\n    } else if (this.state.seeOtherCPM.indexOf(\"20k\") > 0) {\n      otherCPM = /*#__PURE__*/_jsxDEV(Table, {\n        striped: true,\n        bordered: true,\n        hover: true,\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Cost per mile of\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 565,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Cost per mile ($)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 566,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Cost per mile in relation to You\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 567,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 564,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 563,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: \"Your Cost Per Mile\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 572,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: this.state.costpermile.toFixed(2)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 573,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: (this.state.costpermile - this.state.costpermile).toFixed(2)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 574,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 571,\n            columnNumber: 25\n          }, this), this.renderListElement(\"Average US Driver who drives 20k miles\", 0.53), this.renderListElement(\"Average US Driver who drives a Small Sedan (20k miles)\", 0.41), this.renderListElement(\"Average US Driver who drives a Medium Sedan (20k miles)\", 0.49), this.renderListElement(\"Average US Driver who drives a Large Sedan (20k miles)\", 0.59), this.renderListElement(\"Average US Driver who drives a Small SUV (20k miles)\", 0.48), this.renderListElement(\"Average US Driver who drives a Medium SUV (20k miles)\", 0.59), this.renderListElement(\"Average US Driver who drives a Minivan (20k miles)\", 0.57), this.renderListElement(\"Average US Driver who drives a Hybrid Vehicle (20k miles)\", 0.43), this.renderListElement(\"Average US Driver who drives an Electric Vehicle (20k miles\", 0.46)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 570,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 562,\n        columnNumber: 17\n      }, this);\n    } else if (this.state.seeOtherCPM.indexOf(\"Other\") > 0) {\n      otherCPM = /*#__PURE__*/_jsxDEV(Table, {\n        striped: true,\n        bordered: true,\n        hover: true,\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Cost per mile of\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 600,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Cost per mile ($)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 601,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Cost per mile in relation to You\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 602,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 599,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 598,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: \"Your Cost Per Mile\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 607,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: this.state.costpermile.toFixed(2)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 608,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: (this.state.costpermile - this.state.costpermile).toFixed(2)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 609,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 606,\n            columnNumber: 25\n          }, this), this.renderListElement(\"Average US Driver who drives an Acura RDX\", 0.74), this.renderListElement(\"Average US Driver who drives an Audi Q5\", 0.89), this.renderListElement(\"Average US Driver who drives a BMW i3 series\", 0.60), this.renderListElement(\"Average US Driver who drives a Buick Enclave\", 0.76), this.renderListElement(\"Average US Driver who drives a Cadillac Escalade\", 1.35), this.renderListElement(\"Average US Driver who drives a Chevrolet Equinox\", 0.61), this.renderListElement(\"Average US Driver who drives a Dodge Charger\", 0.60), this.renderListElement(\"Average US Driver who drives a Ford F-150\", 0.67), this.renderListElement(\"Average US Driver who drives a Honda CR-V\", 0.45), this.renderListElement(\"Average US Driver who drives a Hyundai Santa Fe\", 0.57), this.renderListElement(\"Average US Driver who drives an Infiniti q50\", 0.80), this.renderListElement(\"Average US Driver who drives a Jeep Wrangler\", 0.66), this.renderListElement(\"Average US Driver who drives a Kia Sportage\", 0.48), this.renderListElement(\"Average US Driver who drives a Lexus RX350 \", 0.81), this.renderListElement(\"Average US Driver who drives a Mercedes C Class\", 0.80), this.renderListElement(\"Average US Driver who drives a Nissan Rogue\", 0.50), this.renderListElement(\"Average US Driver who drives a Porsche Macan\", 1.07), this.renderListElement(\"Average US Driver who drives a Subaru Outback\", 0.50), this.renderListElement(\"Average US Driver who drives a Tesla Model X\", 1.27)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 605,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 596,\n        columnNumber: 17\n      }, this);\n      {\n        /*{this.renderListElement(\"Average US Driver who drives an Acura RDX\", 0.74)}\n               {this.renderListElement(\"Average US Driver who drives an Audi Q5\", 0.89)}\n               {this.renderListElement(\"Average US Driver who drives a BMW i3 series\", 0.60)}\n               {this.renderListElement(\"Average US Driver who drives a Buick Enclave\" , 0.76)}\n               {this.renderListElement(\"Average US Driver who drives a Cadillac Escalade\" , 1.35)}\n               {this.renderListElement(\"Average US Driver who drives a Chevrolet Equinox\" , 0.61)}\n               {this.renderListElement(\"Average US Driver who drives a Dodge Charger\" , 0.60)}\n               {this.renderListElement(\"Average US Driver who drives a Ford F-150\" , 0.67)}\n               {this.renderListElement(\"Average US Driver who drives a Honda CR-V\" , 0.45)}\n               {this.renderListElement(\"Average US Driver who drives a Hyundai Santa Fe\" , 0.57)}\n               {this.renderListElement(\"Average US Driver who drives an Infiniti q50\" , 0.80)}\n               {this.renderListElement(\"Average US Driver who drives a Jeep Wrangler\" , 0.66)}\n               {this.renderListElement(\"Average US Driver who drives a Kia Sportage\" , 0.48)}\n               {this.renderListElement(\"Average US Driver who drives a Lexus RX350 \", 0.81 )}\n               {this.renderListElement(\"Average US Driver who drives a Mercedes C Class\",0.80 )}\n               {this.renderListElement(\"Average US Driver who drives a Nissan Rogue\", 0.50 )}\n               {this.renderListElement(\"Average US Driver who drives a Porsche Macan\",1.07 )}\n               {this.renderListElement(\"Average US Driver who drives a Subaru Outback\", 0.50 )}\n               {this.renderListElement(\"Average US Driver who drives a Tesla Model X\", 1.27 )}\n               */\n      }\n    } else {\n      otherCPM = /*#__PURE__*/_jsxDEV(Table, {\n        striped: true,\n        bordered: true,\n        hover: true,\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Cost per mile of\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 661,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Cost per mile ($)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 662,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Cost per mile in relation to You\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 663,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 660,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 659,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: \"Your Cost Per Mile\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 668,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: this.state.costpermile.toFixed(2)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 669,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: (this.state.costpermile - this.state.costpermile).toFixed(2)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 670,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 667,\n            columnNumber: 25\n          }, this), this.renderListElement(\"Average US Driver who drives 10k miles\", 0, 79), this.renderListElement(\"Average US Driver who drives 15k miles\", 0.61), this.renderListElement(\"Average US Driver who drives 20k miles\", 0.53)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 666,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 658,\n        columnNumber: 17\n      }, this);\n    }\n\n    var renderRelationalData;\n\n    if (Number.isNaN(this.state.costpermile)) {\n      renderRelationalData = /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 682,\n        columnNumber: 36\n      }, this);\n    } else {\n      renderRelationalData = /*#__PURE__*/_jsxDEV(Form.Group, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"See Your CPM in relation to other CPM\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 688,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"If you choose to see other cars, the cost per mile is calculated assuming that you drive 15k miles per year, ~2000 for insurance, ~1300 for fuel, ~1300 for maitenance/repairs, and ~1300 for other miscellaneous costs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 689,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Enter what information you would like to see\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 690,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          as: \"select\",\n          onChange: this.handleChange,\n          id: \"seeOtherCPM\",\n          type: \"text\",\n          name: \"seeOtherCPM\",\n          value: this.state.seeOtherCPM,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            name: \"seeOtherCPM\",\n            children: \"-Choose one of the below-\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 700,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            name: \"seeOtherCPM\",\n            children: \"CPM of Average Car Types for 10k miles\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 701,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            name: \"seeOtherCPM\",\n            children: \"CPM of Average Car Types for 15k miles\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 702,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            name: \"seeOtherCPM\",\n            children: \"CPM of Average Car Types for 20k miles\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 703,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            name: \"seeOtherCPM\",\n            children: \"Average CPM For Other Cars\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 704,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 693,\n          columnNumber: 25\n        }, this), otherCPM]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 687,\n        columnNumber: 21\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Jumbotron, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"11 Question Cost Per Mile Calculator\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 716,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Fill out these questions to the best of your abilitiy as they are the basis of calculating your cost per mile. You will be asked about information that you may not know about some of these questions so fill them out to the best of your ability.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 720,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 715,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: this.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Jumbotron, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Fixed Costs (Section 1/3)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 732,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"1. How much have you paid for insurance a year?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 735,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              placeholder: \"Enter the amount of insurance paid a year\",\n              onChange: this.handleChange,\n              id: \"insurance\",\n              type: \"number\",\n              name: \"iPaid\",\n              value: this.state.iPaid\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 740,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n              className: \"text-muted\",\n              children: \"Enter how much insurace you pay each year\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 748,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 733,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"2. How much have you paid for maitenance and repairs a year?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 757,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              placeholder: \"Enter how much you pay for maitenance a year\",\n              onChange: this.handleChange,\n              id: \"maitenance\",\n              type: \"number\",\n              name: \"mait\",\n              value: this.state.mait\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 762,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n              className: \"text-muted\",\n              children: \"Enter how much you usually pay for maitenance in a year\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 770,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 755,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"3. How much do you pay for other related car costs a year? (subscriptions, parking, etc.)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 775,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              placeholder: \"Enter your other car related costs throughout the year\",\n              onChange: this.handleChange,\n              id: \"subscriptions\",\n              type: \"number\",\n              name: \"subscriptions\",\n              value: this.state.subscriptions\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 778,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 774,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 731,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Jumbotron, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Variable Costs (Section 2/3)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 791,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"4. How much do you pay for tolls every month?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 793,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              placeholder: \"Enter how much you pay for tolls\",\n              onChange: this.handleChange,\n              id: \"tolls\",\n              type: \"number\",\n              name: \"tolls\",\n              value: this.state.tolls\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 798,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n              className: \"text-muted\",\n              children: \"Enter how much you usually pay for tolls every month\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 806,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 792,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"5. How many miles do you usually drive per week?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 813,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"number\",\n              placeholder: \"Enter how many miles driven\",\n              onChange: this.handleChange,\n              id: \"miles\",\n              type: \"number\",\n              name: \"miles\",\n              value: this.state.miles\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 817,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n              className: \"text-muted\",\n              children: \"Enter the miles you usually drive per week\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 825,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 811,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 790,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Jumbotron, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Vehicle Specific Costs (Section 3/3)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 836,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"6. Enter your VIN(Vehicle Identification Number) here\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 838,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              placeholder: \"VIN (Optional) \",\n              onChange: this.handleChange,\n              id: \"VIN\",\n              type: \"text\",\n              name: \"VIN\",\n              value: this.state.VIN\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 841,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: this.handleClick,\n              children: \"Submit your VIN to get official data from the NHTSA\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 849,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n              children: \"We are gathering this information in order to gather your mpg, car make, car model, and car year. If you do not know your VIN or do not want to share your VIN, enter the following questions to the best of your ability. However, if you do know your VIN, enter it and click the following button . Some data about your car may still be missing so answer the unaswered questions.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 854,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 837,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"7. What is your car make?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 859,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              as: \"select\",\n              placeholder: \"Enter your car make\",\n              onChange: this.handleChange,\n              id: \"carMake\",\n              type: \"text\",\n              name: \"carMake\",\n              value: this.state.carMake,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"-Choose your car make below-\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 870,\n                columnNumber: 33\n              }, this), allOptions]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 862,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: renderCarModel\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 875,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 858,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"8. What is your car year?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 882,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              onChange: this.handleChange,\n              id: \"carYear\",\n              name: \"carYear\",\n              value: this.state.carYear,\n              as: \"select\",\n              children: carYears\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 885,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 881,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"9. Are you an electric vehicle user or gas car user?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 896,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              as: \"select\",\n              onChange: this.handleChange,\n              id: \"isElectric\",\n              type: \"text\",\n              name: \"isElectric\",\n              value: this.state.isElectric,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                name: \"isElectric\",\n                children: \"-Choose your power type-\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 909,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                name: \"isElectric\",\n                children: \"gas\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 910,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                name: \"isElectric\",\n                children: \"electric\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 911,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 901,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: renderThis\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 915,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 894,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"10. How much was this car when it was brand new?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 923,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              placeholder: \"Enter your original price\",\n              onChange: this.handleChange,\n              id: \"originalPrice\",\n              type: \"number\",\n              name: \"originalPrice\",\n              value: this.state.originalPrice\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 926,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 922,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"11. How much is your car worth now?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 936,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              placeholder: \"Enter the current price\",\n              onChange: this.handleChange,\n              id: \"finalPrice\",\n              type: \"number\",\n              name: \"finalPrice\",\n              value: this.state.finalPrice\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 939,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 935,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 948,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 835,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 727,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 952,\n        columnNumber: 17\n      }, this), renderRelationalData]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 713,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(Calculator, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 966,\n  columnNumber: 5\n}, this), document.getElementById(\"root\"));","map":{"version":3,"sources":["/Users/alexhoang/ReactProjects/CostPerMile/src/index.js"],"names":["React","ReactDOM","Button","Jumbotron","Toast","Container","Form","Table","compare","a","b","nameA","Make_Name","nameB","comparison","Calculator","Component","constructor","props","state","costpermile","iPaid","miles","mait","api","require","sort","models","originalPrice","finalPrice","tolls","statecode","mpg","subscriptions","gallon","typeOfGas","priceOfGas","city","VIN","VINAPI","depreciationValue","fullcharge","fullchargeCost","zipcode","carMake","carModel","isElectric","carYear","carBasePrice","seeOtherCPM","handleChange","bind","handleSubmit","handleClick","depreciate","depreciation","parseInt","setState","event","name","value","target","console","log","e","getVIN","preventDefault","getZIP","length","getData","final","vin","make","model","modelYear","basePrice","fuelType","fetch","then","response","json","data","filter","x","Variable","Value","indexOf","zip","options","http","self","req","request","res","chunks","on","chunk","push","body","Buffer","concat","bodyJSON","JSON","parse","toString","end","toUpperCase","result","cities","toLowerCase","renderListElement","stringDisplay","CPM","toFixed","render","allOptions","map","num","allOptions2","renderCarModel","years","i","carYears","Model_Name","renderThis","otherCPM","renderRelationalData","Number","isNaN","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './carmakes.json'\n\nimport Button from 'react-bootstrap/Button';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Toast from 'react-bootstrap/Toast';\nimport Container from 'react-bootstrap/Container';\nimport { Form } from 'react-bootstrap';\nimport { Table } from 'react-bootstrap';\nfunction compare(a, b) {\n    const nameA = a.Make_Name;\n    const nameB = b.Make_Name;\n    let comparison = 0;\n    if (nameA > nameB) {\n        comparison = 1;\n    } else if (nameA < nameB) {\n        comparison = -1;\n    }\n    return comparison;\n}\n\nclass Calculator extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            costpermile: 0,\n            iPaid: \"\",\n            miles: \"\",\n            mait: \"\",\n            api: require('./carmakes.json')[\"Results\"].sort(compare),\n            models: [],\n            originalPrice: \"\",\n            finalPrice: \"\",\n            tolls: \"\",\n            statecode: \"\",\n            mpg: \"\",\n            subscriptions: \"\",\n            gallon: \"\",\n            typeOfGas: \"gasoline\",\n            priceOfGas: \"\",\n            city: \"\",\n            VIN: \"\",\n            VINAPI: \"\",\n            depreciationValue: \"\",\n            fullcharge: \"\",\n            fullchargeCost: \"\",\n            zipcode: \"\",\n            carMake: \"-\",\n            carModel: \"\",\n            isElectric: \"\",\n            carYear: \"\",\n            carBasePrice: \"\",\n            seeOtherCPM: \"\",\n\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n\n\n    }\n\n    depreciate() {\n\n        let depreciation = (parseInt(this.state.originalPrice) - parseInt(this.state.finalPrice)) / (2021 - parseInt(this.state.carYear));\n        this.setState({ depreciationValue: depreciation });\n    }\n    handleChange(event) {\n        const { name, value } = event.target\n        this.setState({\n            [name]: value,\n        });\n\n        console.log(this.state);\n    }\n    handleClick(e) {\n        this.getVIN(this.state.VIN);\n\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        this.depreciate();\n        this.getZIP(this.state.zipcode);\n\n        if (this.state.mpg.length > 0) {\n            this.getData(this.state.statecode);\n        }\n\n\n        let final;\n\n        if (this.state.mpg.length > 0) {\n            final = (parseInt(this.state.depreciationValue) +\n                parseInt(this.state.iPaid) +\n                (((this.state.miles * 52) / this.state.mpg) * this.state.gallon) +\n                parseInt(this.state.mait) +\n                (parseInt(this.state.tolls) * 12) +\n                parseInt(this.state.subscriptions))\n                / (parseInt(this.state.miles) * 52);\n        } else {\n            final = (parseInt(this.state.depreciationValue) +\n                parseInt(this.state.iPaid) +\n                ((parseInt(this.state.miles) / parseInt(this.state.fullcharge)) * parseInt(this.state.fullchargeCost)) +\n                parseInt(this.state.mait) +\n                (parseInt(this.state.tolls) * 12) +\n                parseInt(this.state.subscriptions)) /\n                (parseInt(this.state.miles) * 52);\n\n        }\n\n        this.setState(\n            {\n                costpermile: final\n            })\n    }\n    getVIN(vin) {\n        var make;\n        var model;\n        var modelYear;\n        var basePrice;\n        var fuelType;\n        if (vin.length > 0) {\n            fetch('https://vpic.nhtsa.dot.gov/api/vehicles/decodevin/' + this.state.VIN + '?format=json&modelyear=')\n                .then(response => response.json())\n                .then(data => {\n                    this.setState({ VINAPI: data[\"Results\"] });\n\n                    if (this.state.VINAPI.length > 0) {\n                        make = this.state.VINAPI.filter((x) => x.Variable === \"Make\")[0].Value;\n                        model = this.state.VINAPI.filter((x) => x.Variable === \"Model\")[0].Value;\n                        modelYear = this.state.VINAPI.filter((x) => x.Variable === \"Model Year\")[0].Value;\n                        basePrice = this.state.VINAPI.filter((x) => x.Variable === \"Base Price ($)\")[0].Value;\n                        fuelType = this.state.VINAPI.filter((x) => x.Variable === \"Fuel Type - Primary\")[0].Value;\n                        if (make === null || make === \"Not Applicable\") {\n                            console.log(\"make is null\");\n                        }\n                        if (model === null || make === \"Not Applicable\") {\n                            console.log(\"model is null\");\n                        }\n                        if (modelYear === null || make === \"Not Applicable\") {\n                            console.log(\"modelYear is null\");\n                        }\n                        if (basePrice === null || make === \"Not Applicable\") {\n                            console.log(\"basePrice is null\");\n                        }\n                        if (fuelType === null || make === \"Not Applicable\") {\n                            console.log(\"fuelType is null\");\n                        }\n                        if (fuelType !== null) {\n                            if (fuelType.indexOf(\"as\") > 0) {\n                                fuelType = \"gas\"\n                            } else {\n                                fuelType = \"electric\"\n                            }\n                        } else {\n                            fuelType = \"\"\n                        }\n                        this.setState({\n                            carMake: make,\n                            carModel: model,\n                            carYear: modelYear,\n                            carBasePrice: basePrice,\n                            isElectric: fuelType\n                        })\n                        console.log(this.state);\n                    }\n\n                })\n\n        }\n    }\n\n    getZIP(zip) {\n        if (zip.length > 0) {\n            const options = {\n                \"method\": \"GET\",\n                \"hostname\": \"redline-redline-zipcode.p.rapidapi.com\",\n                \"port\": null,\n                \"path\": \"/rest/info.json/\" + this.state.zipcode + \"/degrees\",\n                \"headers\": {\n                    \"x-rapidapi-key\": \"73d45d6313mshd16f17ab16d3fe8p1368ecjsn7f132604eddb\",\n                    \"x-rapidapi-host\": \"redline-redline-zipcode.p.rapidapi.com\",\n                    \"useQueryString\": true\n                }\n            };\n            /*var obj = {  \n                method: 'GET',\n                \n                \"port\": null,\n                \"path\": \"/rest/info.json/\" + this.state.zipcode + \"/degrees\",\n                headers: {\n                    \"x-rapidapi-key\": \"73d45d6313mshd16f17ab16d3fe8p1368ecjsn7f132604eddb\",\n                    \"x-rapidapi-host\": \"redline-redline-zipcode.p.rapidapi.com\",\n                    \"useQueryString\": true\n                },\n                \n            };\n            fetch('redline-redline-zipcode.p.rapidapi.com/rest/info.json/ ${this.state.zipcode}  /degrees')\n            .then(response => response.json())\n            .then(data => {\n                console.log(data.toString());\n                \n                this.setState({\n                    statecode: data.state,\n                    city: data.city,\n                })\n                this.getData(this.state.statecode);\n            })\n            */\n\n\n\n\n\n            const http = require(\"https\");\n\n\n            var self = this;\n            const req = http.request(options, function (res) {\n                const chunks = [];\n\n                res.on(\"data\", function (chunk) {\n                    chunks.push(chunk);\n                });\n\n                res.on(\"end\", function () {\n                    const body = Buffer.concat(chunks);\n\n                    var bodyJSON = JSON.parse(body.toString());\n                    console.log(bodyJSON);\n                    self.setState({\n                        statecode: bodyJSON.state,\n                        city: bodyJSON.city,\n                    })\n\n                    self.getData(self.state.statecode)\n\n                });\n            })\n\n            req.end();\n\n\n\n        }\n    }\n\n\n    getData(state) {\n\n        if (state.length > 0) {\n\n\n            /*const options = {\n                \"method\": \"GET\",\n                \n                \"port\": null,\n                \"path\": \"/gasPrice/stateUsaPrice?state=\" + state.toUpperCase(),\n                \"headers\": {\n                    \"content-type\": \"application/json\",\n                    \"authorization\": \"apikey 49S3NpApsO1VH7MBkPuIdl:7czVHVdiBbrpo2bR2gV987\"\n                }\n            }\n            fetch(\"api.collectapi.com\",options)\n            .then(response => response.json())\n            .then(data => {\n                console.log(data);\n                this.getData(this.state.statecode)\n            })\n            */\n\n\n            var http = require(\"https\");\n\n            var options = {\n                \"method\": \"GET\",\n                \"hostname\": \"api.collectapi.com\",\n                \"port\": null,\n                \"path\": \"/gasPrice/stateUsaPrice?state=\" + state.toUpperCase(),\n                \"headers\": {\n                    \"content-type\": \"application/json\",\n                    \"authorization\": \"apikey 49S3NpApsO1VH7MBkPuIdl:7czVHVdiBbrpo2bR2gV987\"\n                }\n            };\n            var self = this;\n            var req = http.request(options, function (res) {\n                var chunks = [];\n\n                res.on(\"data\", function (chunk) {\n                    chunks.push(chunk);\n                });\n\n                res.on(\"end\", function () {\n                    var body = Buffer.concat(chunks);\n                    var bodyJSON = JSON.parse(body.toString());\n                    console.log(bodyJSON);\n                    console.log(self.state.typeOfGas);\n                    var city = bodyJSON.result.cities.filter((x) => x.name.toLowerCase() === self.state.city.toLowerCase());\n                    if (city.length > 0) {\n                        console.log(city[0][self.state.typeOfGas]);\n                        self.setState({\n                            gallon: city[0][self.state.typeOfGas]\n                        })\n                        console.log(self.state);\n                    }\n\n                });\n            });\n\n            req.end();\n\n\n        }\n    }\n    renderListElement(stringDisplay, CPM) {\n        return (\n            <tr>\n                <td>{stringDisplay}</td>\n                <td>{CPM}</td>\n                <td>{this.state.costpermile.toFixed(2) - CPM > 0 ? \"+\" + (this.state.costpermile.toFixed(2) - CPM).toFixed(2) : (this.state.costpermile.toFixed(2) - CPM).toFixed(2)}</td>\n            </tr>\n        );\n    }\n    render() {\n        let allOptions;\n\n\n        allOptions = this.state.api.map((num) => <option>{num.Make_Name}</option>)\n        let allOptions2;\n        let renderCarModel;\n\n\n        if (this.state.carMake.length > 0) {\n            fetch('https://vpic.nhtsa.dot.gov/api/vehicles/GetModelsForMake/' + this.state.carMake + '?format=json')\n                .then(response => response.json())\n                .then(data => {\n                    this.setState({ models: data[\"Results\"] });\n\n                })\n\n        }\n\n        var years = [];\n        for (var i = 0; i < 100; i++) {\n            years.push(2021 - i);\n        }\n        const carYears = years.map((num) => <option>{num}</option>)\n        allOptions2 = this.state.models.map((num) => <option>{num.Model_Name}</option>)\n\n        //CONDITIONAL RENDERING FOR CAR MODEL BASED ON MAKE\n        if (this.state.carMake.indexOf(\"-\") === 0) {\n            renderCarModel = (<div></div>);\n        }\n        else {\n            renderCarModel = (\n                <div>\n                    <Form.Group>\n                        <Form.Label>\n                            a. What is your car model?\n                        </Form.Label>\n                        <Form.Control\n                            as=\"select\"\n\n                            onChange={this.handleChange}\n                            id=\"carModel\"\n                            name=\"carModel\"\n                            value={this.state.carModel}\n                        >\n                            {allOptions2}\n                        </Form.Control>\n                    </Form.Group>\n                </div>\n            );\n\n        }\n\n        let renderThis;\n        // CONDITIONAL RENDERING BASED ON USER CHOICE IF ELECTRIC OR NOT\n        if (this.state.isElectric.indexOf(\"as\") > 0) {\n            renderThis = (<div><Form.Group>\n                <Form.Label>\n                    What fuel type do you use?\n                </Form.Label>\n                <Form.Control as=\"select\"\n                    onChange={this.handleChange}\n                    id=\"typeOfGas\"\n                    type=\"text\"\n                    name=\"typeOfGas\"\n                    value={this.state.typeOfGas}\n                >\n                    <option name=\"typeOfGas\"> gasoline</option>\n                    <option name=\"typeOfGas\">midGrade</option>\n                    <option name=\"typeOfGas\"> premium</option>\n                    <option name=\"typeOfGas\"> diesel</option>\n                </Form.Control>\n                <Form.Text>\n                    Do not answer this question if you are an electric vehicle user\n                </Form.Text>\n            </Form.Group>\n\n\n                <Form.Group>\n                    <Form.Label>\n                        What is your MPG(Miles Per Gallon)?\n                    </Form.Label>\n\n                    <Form.Control\n                        placeholder=\"Enter your mpg\"\n                        onChange={this.handleChange}\n                        id=\"mpg\"\n                        type=\"number\"\n                        name=\"mpg\"\n                        value={this.state.mpg}\n                    />\n                    <Form.Text>\n                        Do not answer this question if you are an electric vehicle user\n                    </Form.Text>\n                </Form.Group>\n\n                <Form.Group>\n                    <Form.Label>\n                        What is your zip code?\n                    </Form.Label>\n\n                    <Form.Control\n                        placeholder=\"Enter your zip code\"\n                        onChange={this.handleChange}\n                        id=\"zipcode\"\n                        type=\"number\"\n                        name=\"zipcode\"\n                        value={this.state.zipcode}\n                    />\n                    <Form.Text >\n                        This question gets the gas prices in your area!\n                    </Form.Text>\n                </Form.Group>\n\n\n                <label>\n                    {this.state.city.length > 0 ? \"Your city, state is \" + this.state.city + \", \" + this.state.statecode : \"\"}\n                </label>\n            </div>);\n        } else if (this.state.isElectric.indexOf(\"lectric\") > 0) {\n            renderThis = (<div>\n                <Form.Group>\n                    <Form.Label>\n                        If you drive an electric vehicle, how far can you drive on a full charge in miles?\n                    </Form.Label>\n\n                    <Form.Control\n                        placeholder=\"fullcharge\"\n                        onChange={this.handleChange}\n                        id=\"fullcharge\"\n                        type=\"number\"\n                        name=\"fullcharge\"\n                        value={this.state.fullcharge}\n                    />\n                    <Form.Text>\n                        Do not answer this question if you are a gas vehicle user\n                    </Form.Text>\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>\n                        If you drive an electric vehicle, how much does it cost for a full charge?\n                    </Form.Label>\n\n                    <Form.Control\n                        placeholder=\"fullchargeCost\"\n                        onChange={this.handleChange}\n                        id=\"fullchargeCost\"\n                        type=\"number\"\n                        name=\"fullchargeCost\"\n                        value={this.state.fullchargeCost}\n                    />\n                    <Form.Text>\n                        Do not answer this question if you are a gas vehicle user\n                    </Form.Text>\n                </Form.Group>\n            </div>);\n        } else {\n            renderThis = (\n                <div></div>\n            );\n        }\n\n        let otherCPM;\n        //CONDITIONAL RENDERING FOR DATA SHOWN AT THE BOTTOM\n        if (this.state.seeOtherCPM.indexOf(\"10k\") > 0) {\n            otherCPM = (\n                <Table striped bordered hover>\n                    <thead>\n                        <tr>\n                            <th>Cost per mile of</th>\n                            <th>Cost per mile ($)</th>\n                            <th>Cost per mile in relation to You</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td>Your Cost Per Mile</td>\n                            <td>{this.state.costpermile.toFixed(2)}</td>\n                            <td>{(this.state.costpermile - this.state.costpermile).toFixed(2)}</td>\n                        </tr>\n\n                        {this.renderListElement(\"Average US Driver who drives 10k miles\", 0, 79)}\n\n                        {this.renderListElement(\"Average US Driver who drives a Small Sedan (10k miles)\", 0.61)}\n                        {this.renderListElement(\"Average US Driver who drives a Medium Sedan (10k miles)\", 0.75)}\n                        {this.renderListElement(\"Average US Driver who drives a Large Sedan (10k miles)\", 0.90)}\n                        {this.renderListElement(\"Average US Driver who drives a Small SUV (10k miles)\", 0.71)}\n                        {this.renderListElement(\"Average US Driver who drives a Medium SUV (10k miles)\", 0.87)}\n                        {this.renderListElement(\"Average US Driver who drives a Minivan (10k miles)\", 0.87)}\n                        {this.renderListElement(\"Average US Driver who drives a Hybrid Vehicle (10k miles)\", 0.68)}\n                        {this.renderListElement(\"Average US Driver who drives an Electric Vehicle (10k miles\", 0.75)}\n                    </tbody>\n                </Table>\n            )\n\n        }\n        else if (this.state.seeOtherCPM.indexOf(\"15k\") > 0) {\n            otherCPM = (\n                <Table striped bordered hover>\n                    <thead>\n                        <tr>\n                            <th>Cost per mile of</th>\n                            <th>Cost per mile ($)</th>\n                            <th>Cost per mile in relation to You</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td>Your Cost Per Mile</td>\n                            <td>{this.state.costpermile.toFixed(2)}</td>\n                            <td>{(this.state.costpermile - this.state.costpermile).toFixed(2)}</td>\n                        </tr>\n\n                        {this.renderListElement(\"Average US Driver who drives 15k miles\", 0.61)}\n         \n                        {this.renderListElement(\"Average US Driver who drives a Small Sedan (15k miles)\", 0.47)}\n                        {this.renderListElement(\"Average US Driver who drives a Medium Sedan (15k miles)\", 0.58)}\n                        {this.renderListElement(\"Average US Driver who drives a Large Sedan (15k miles)\", 0.69)}\n                        {this.renderListElement(\"Average US Driver who drives a Small SUV (15k miles)\", 0.56)}\n                        {this.renderListElement(\"Average US Driver who drives a Medium SUV (15k miles)\", 0.68)}\n                        {this.renderListElement(\"Average US Driver who drives a Minivan (15k miles)\", 0.67)}\n                        {this.renderListElement(\"Average US Driver who drives a Hybrid Vehicle (15k miles)\", 0.52)}\n                        {this.renderListElement(\"Average US Driver who drives an Electric Vehicle (15k miles\", 0.55)}\n\n\n\n                    </tbody>\n                </Table>\n\n\n            )\n        }\n        else if (this.state.seeOtherCPM.indexOf(\"20k\") > 0) {\n            otherCPM = (\n                <Table striped bordered hover>\n                    <thead>\n                        <tr>\n                            <th>Cost per mile of</th>\n                            <th>Cost per mile ($)</th>\n                            <th>Cost per mile in relation to You</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td>Your Cost Per Mile</td>\n                            <td>{this.state.costpermile.toFixed(2)}</td>\n                            <td>{(this.state.costpermile - this.state.costpermile).toFixed(2)}</td>\n                        </tr>\n\n                        \n                        {this.renderListElement(\"Average US Driver who drives 20k miles\", 0.53)}\n                        {this.renderListElement(\"Average US Driver who drives a Small Sedan (20k miles)\", 0.41)}\n                        {this.renderListElement(\"Average US Driver who drives a Medium Sedan (20k miles)\", 0.49)}\n                        {this.renderListElement(\"Average US Driver who drives a Large Sedan (20k miles)\", 0.59)}\n                        {this.renderListElement(\"Average US Driver who drives a Small SUV (20k miles)\", 0.48)}\n                        {this.renderListElement(\"Average US Driver who drives a Medium SUV (20k miles)\", 0.59)}\n                        {this.renderListElement(\"Average US Driver who drives a Minivan (20k miles)\", 0.57)}\n                        {this.renderListElement(\"Average US Driver who drives a Hybrid Vehicle (20k miles)\", 0.43)}\n                        {this.renderListElement(\"Average US Driver who drives an Electric Vehicle (20k miles\", 0.46)}\n                    </tbody>\n                </Table>\n\n\n            )\n        }\n        else if (this.state.seeOtherCPM.indexOf(\"Other\") > 0) {\n\n            otherCPM = (\n                <Table striped bordered hover>\n\n                    <thead>\n                        <tr>\n                            <th>Cost per mile of</th>\n                            <th>Cost per mile ($)</th>\n                            <th>Cost per mile in relation to You</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td>Your Cost Per Mile</td>\n                            <td>{this.state.costpermile.toFixed(2)}</td>\n                            <td>{(this.state.costpermile - this.state.costpermile).toFixed(2)}</td>\n                        </tr>\n                        {this.renderListElement(\"Average US Driver who drives an Acura RDX\", 0.74)}\n                        {this.renderListElement(\"Average US Driver who drives an Audi Q5\", 0.89)}\n                        {this.renderListElement(\"Average US Driver who drives a BMW i3 series\", 0.60)}\n                        {this.renderListElement(\"Average US Driver who drives a Buick Enclave\", 0.76)}\n                        {this.renderListElement(\"Average US Driver who drives a Cadillac Escalade\", 1.35)}\n                        {this.renderListElement(\"Average US Driver who drives a Chevrolet Equinox\", 0.61)}\n                        {this.renderListElement(\"Average US Driver who drives a Dodge Charger\", 0.60)}\n                        {this.renderListElement(\"Average US Driver who drives a Ford F-150\", 0.67)}\n                        {this.renderListElement(\"Average US Driver who drives a Honda CR-V\", 0.45)}\n                        {this.renderListElement(\"Average US Driver who drives a Hyundai Santa Fe\", 0.57)}\n                        {this.renderListElement(\"Average US Driver who drives an Infiniti q50\", 0.80)}\n                        {this.renderListElement(\"Average US Driver who drives a Jeep Wrangler\", 0.66)}\n                        {this.renderListElement(\"Average US Driver who drives a Kia Sportage\", 0.48)}\n                        {this.renderListElement(\"Average US Driver who drives a Lexus RX350 \", 0.81)}\n                        {this.renderListElement(\"Average US Driver who drives a Mercedes C Class\", 0.80)}\n                        {this.renderListElement(\"Average US Driver who drives a Nissan Rogue\", 0.50)}\n                        {this.renderListElement(\"Average US Driver who drives a Porsche Macan\", 1.07)}\n                        {this.renderListElement(\"Average US Driver who drives a Subaru Outback\", 0.50)}\n                        {this.renderListElement(\"Average US Driver who drives a Tesla Model X\", 1.27)}\n\n                    </tbody>\n                </Table>);\n            {/*{this.renderListElement(\"Average US Driver who drives an Acura RDX\", 0.74)}\n                    {this.renderListElement(\"Average US Driver who drives an Audi Q5\", 0.89)}\n                    {this.renderListElement(\"Average US Driver who drives a BMW i3 series\", 0.60)}\n                    {this.renderListElement(\"Average US Driver who drives a Buick Enclave\" , 0.76)}\n                    {this.renderListElement(\"Average US Driver who drives a Cadillac Escalade\" , 1.35)}\n                    {this.renderListElement(\"Average US Driver who drives a Chevrolet Equinox\" , 0.61)}\n                    {this.renderListElement(\"Average US Driver who drives a Dodge Charger\" , 0.60)}\n                    {this.renderListElement(\"Average US Driver who drives a Ford F-150\" , 0.67)}\n                    {this.renderListElement(\"Average US Driver who drives a Honda CR-V\" , 0.45)}\n                    {this.renderListElement(\"Average US Driver who drives a Hyundai Santa Fe\" , 0.57)}\n                    {this.renderListElement(\"Average US Driver who drives an Infiniti q50\" , 0.80)}\n                    {this.renderListElement(\"Average US Driver who drives a Jeep Wrangler\" , 0.66)}\n                    {this.renderListElement(\"Average US Driver who drives a Kia Sportage\" , 0.48)}\n                    {this.renderListElement(\"Average US Driver who drives a Lexus RX350 \", 0.81 )}\n                    {this.renderListElement(\"Average US Driver who drives a Mercedes C Class\",0.80 )}\n                    {this.renderListElement(\"Average US Driver who drives a Nissan Rogue\", 0.50 )}\n                    {this.renderListElement(\"Average US Driver who drives a Porsche Macan\",1.07 )}\n                    {this.renderListElement(\"Average US Driver who drives a Subaru Outback\", 0.50 )}\n                    {this.renderListElement(\"Average US Driver who drives a Tesla Model X\", 1.27 )}\n                    */}\n\n\n        }\n        else {\n            otherCPM = (\n                <Table striped bordered hover>\n                    <thead>\n                        <tr>\n                            <th>Cost per mile of</th>\n                            <th>Cost per mile ($)</th>\n                            <th>Cost per mile in relation to You</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td>Your Cost Per Mile</td>\n                            <td>{this.state.costpermile.toFixed(2)}</td>\n                            <td>{(this.state.costpermile - this.state.costpermile).toFixed(2)}</td>\n                        </tr>\n\n                        {this.renderListElement(\"Average US Driver who drives 10k miles\", 0, 79)}\n                        {this.renderListElement(\"Average US Driver who drives 15k miles\", 0.61)}\n                        {this.renderListElement(\"Average US Driver who drives 20k miles\", 0.53)}\n                    </tbody>\n                </Table>\n            )\n        }\n        var renderRelationalData;\n        if (Number.isNaN(this.state.costpermile)) {\n            renderRelationalData = <div></div>\n        }\n        else {\n            renderRelationalData =\n                (\n                    <Form.Group>\n                        <h2>See Your CPM in relation to other CPM</h2>\n                        <p>If you choose to see other cars, the cost per mile is calculated assuming that you drive 15k miles per year, ~2000 for insurance, ~1300 for fuel, ~1300 for maitenance/repairs, and ~1300 for other miscellaneous costs</p>\n                        <Form.Label>\n                            Enter what information you would like to see\n                        </Form.Label>\n                        <Form.Control as=\"select\"\n                            onChange={this.handleChange}\n                            id=\"seeOtherCPM\"\n                            type=\"text\"\n                            name=\"seeOtherCPM\"\n                            value={this.state.seeOtherCPM}\n                        >\n                            <option name=\"seeOtherCPM\">-Choose one of the below-</option>\n                            <option name=\"seeOtherCPM\">CPM of Average Car Types for 10k miles</option>\n                            <option name=\"seeOtherCPM\">CPM of Average Car Types for 15k miles</option>\n                            <option name=\"seeOtherCPM\">CPM of Average Car Types for 20k miles</option>\n                            <option name=\"seeOtherCPM\">Average CPM For Other Cars</option>\n                        </Form.Control>\n\n\n                        {otherCPM}\n                    </Form.Group>\n                );\n        }\n        return (\n            <Container>\n\n                <Jumbotron>\n                    <h1>\n                        11 Question Cost Per Mile Calculator\n\n                    </h1>\n                    <p>\n                        Fill out these questions to the best of your abilitiy as they are the basis of calculating your cost per mile. You will be asked about information that you may not know about some of these questions so fill them out to the best of your ability.\n                    </p>\n                </Jumbotron>\n\n\n\n                <Form onSubmit={this.handleSubmit}>\n\n\n\n                    <Jumbotron>\n                        <h2>Fixed Costs (Section 1/3)</h2>\n                        <Form.Group>\n\n                            <Form.Label>\n                                1. How much have you paid for insurance a year?\n                            </Form.Label>\n\n\n                            <Form.Control\n                                placeholder=\"Enter the amount of insurance paid a year\"\n                                onChange={this.handleChange}\n                                id=\"insurance\"\n                                type=\"number\"\n                                name=\"iPaid\"\n                                value={this.state.iPaid}\n                            />\n                            <Form.Text className=\"text-muted\">\n                                Enter how much insurace you pay each year\n                            </Form.Text>\n                        </Form.Group>\n\n\n\n                        <Form.Group>\n\n                            <Form.Label>\n                                2. How much have you paid for maitenance and repairs a year?\n                            </Form.Label>\n\n\n                            <Form.Control\n                                placeholder=\"Enter how much you pay for maitenance a year\"\n                                onChange={this.handleChange}\n                                id=\"maitenance\"\n                                type=\"number\"\n                                name=\"mait\"\n                                value={this.state.mait}\n                            />\n                            <Form.Text className=\"text-muted\">\n                                Enter how much you usually pay for maitenance in a year\n                            </Form.Text>\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>\n                                3. How much do you pay for other related car costs a year? (subscriptions, parking, etc.)\n                            </Form.Label>\n                            <Form.Control\n                                placeholder=\"Enter your other car related costs throughout the year\"\n                                onChange={this.handleChange}\n                                id=\"subscriptions\"\n                                type=\"number\"\n                                name=\"subscriptions\"\n                                value={this.state.subscriptions}\n                            />\n                        </Form.Group>\n                    </Jumbotron>\n\n\n                    <Jumbotron>\n                        <h2>Variable Costs (Section 2/3)</h2>\n                        <Form.Group>\n                            <Form.Label>\n                                4. How much do you pay for tolls every month?\n                            </Form.Label>\n\n\n                            <Form.Control\n                                placeholder=\"Enter how much you pay for tolls\"\n                                onChange={this.handleChange}\n                                id=\"tolls\"\n                                type=\"number\"\n                                name=\"tolls\"\n                                value={this.state.tolls}\n                            />\n                            <Form.Text className=\"text-muted\">\n                                Enter how much you usually pay for tolls every month\n                            </Form.Text>\n                        </Form.Group>\n\n                        <Form.Group>\n\n                            <Form.Label>\n                                5. How many miles do you usually drive per week?\n                            </Form.Label>\n\n                            <Form.Control type=\"number\"\n                                placeholder=\"Enter how many miles driven\"\n                                onChange={this.handleChange}\n                                id=\"miles\"\n                                type=\"number\"\n                                name=\"miles\"\n                                value={this.state.miles}\n                            />\n                            <Form.Text className=\"text-muted\">\n                                Enter the miles you usually drive per week\n                            </Form.Text>\n\n\n                        </Form.Group>\n\n\n                    </Jumbotron>\n\n                    <Jumbotron>\n                        <h2>Vehicle Specific Costs (Section 3/3)</h2>\n                        <Form.Group>\n                            <Form.Label>\n                                6. Enter your VIN(Vehicle Identification Number) here\n                            </Form.Label>\n                            <Form.Control\n                                placeholder=\"VIN (Optional) \"\n                                onChange={this.handleChange}\n                                id=\"VIN\"\n                                type=\"text\"\n                                name=\"VIN\"\n                                value={this.state.VIN}\n                            />\n                            <Button\n                                onClick={this.handleClick}\n                            >\n                                Submit your VIN to get official data from the NHTSA\n                            </Button>\n                            <Form.Text>\n                                We are gathering this information in order to gather your mpg, car make, car model, and car year. If you do not know your VIN or do not want to share your VIN, enter the following questions to the best of your ability. However, if you do know your VIN, enter it and click the following button . Some data about your car may still be missing so answer the unaswered questions.\n                            </Form.Text>\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>\n                                7. What is your car make?\n                            </Form.Label>\n                            <Form.Control as=\"select\"\n                                placeholder=\"Enter your car make\"\n                                onChange={this.handleChange}\n                                id=\"carMake\"\n                                type=\"text\"\n                                name=\"carMake\"\n                                value={this.state.carMake}\n                            >\n                                <option>-Choose your car make below-</option>\n                                {allOptions}\n\n                            </Form.Control>\n\n                            <div>\n                                {renderCarModel}\n\n                            </div>\n\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>\n                                8. What is your car year?\n                            </Form.Label>\n                            <Form.Control\n                                onChange={this.handleChange}\n                                id=\"carYear\"\n                                name=\"carYear\"\n                                value={this.state.carYear}\n                                as=\"select\">\n                                {carYears}\n                            </Form.Control>\n                        </Form.Group>\n                        <Form.Group>\n\n                            <Form.Label>\n                                9. Are you an electric vehicle user or gas car user?\n                            </Form.Label>\n\n\n                            <Form.Control as=\"select\"\n\n                                onChange={this.handleChange}\n                                id=\"isElectric\"\n                                type=\"text\"\n                                name=\"isElectric\"\n                                value={this.state.isElectric}\n                            >\n                                <option name=\"isElectric\">-Choose your power type-</option>\n                                <option name=\"isElectric\">gas</option>\n                                <option name=\"isElectric\">electric</option>\n\n                            </Form.Control>\n\n                            <div>\n                                {renderThis}\n                            </div>\n\n                        </Form.Group>\n\n\n                        <Form.Group>\n                            <Form.Label>\n                                10. How much was this car when it was brand new?\n                            </Form.Label>\n                            <Form.Control\n                                placeholder=\"Enter your original price\"\n                                onChange={this.handleChange}\n                                id=\"originalPrice\"\n                                type=\"number\"\n                                name=\"originalPrice\"\n                                value={this.state.originalPrice}\n                            />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>\n                                11. How much is your car worth now?\n                            </Form.Label>\n                            <Form.Control\n                                placeholder=\"Enter the current price\"\n                                onChange={this.handleChange}\n                                id=\"finalPrice\"\n                                type=\"number\"\n                                name=\"finalPrice\"\n                                value={this.state.finalPrice}\n                            />\n                        </Form.Group>\n                        <input type=\"submit\"\n                        />\n                    </Jumbotron>\n                </Form>\n                <br />\n\n                {//CONDITIONAL RENDERING IF CPM IS NOT NaN\n                }\n\n                {renderRelationalData}\n\n\n            </Container>\n        );\n    }\n}\n\nReactDOM.render(\n    <Calculator />,\n    document.getElementById(\"root\")\n);\n"]},"metadata":{},"sourceType":"module"}