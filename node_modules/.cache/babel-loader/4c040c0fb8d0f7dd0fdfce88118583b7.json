{"ast":null,"code":"var _jsxFileName = \"/Users/alexhoang/ReactProjects/CostPerMile/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Button from 'react-bootstrap/Button';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Toast from 'react-bootstrap/Toast';\nimport Container from 'react-bootstrap/Container';\nimport { Form } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      costpermile: 0,\n      iPaid: \"\",\n      miles: \"\",\n      mait: \"\",\n      api: [],\n      models: [],\n      originalPrice: \"\",\n      finalPrice: \"\",\n      tolls: \"\",\n      statecode: \"\",\n      mpg: \"\",\n      subscriptions: \"\",\n      gallon: \"\",\n      typeOfGas: \"gasoline\",\n      priceOfGas: \"\",\n      city: \"\",\n      VIN: \"\",\n      depreciationValue: \"\",\n      fullcharge: \"\",\n      fullchargeCost: \"\",\n      zipcode: \"\",\n      carMake: \"\",\n      carModel: \"\",\n      isElectric: \"\",\n      carYear: \"\"\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleCarMake = this.handleCarMake.bind(this);\n  }\n\n  depreciate() {\n    let depreciation = (parseInt(this.state.originalPrice) - parseInt(this.state.finalPrice)) / (2021 - parseInt(this.state.carYear));\n    this.setState({\n      depreciationValue: depreciation\n    });\n  }\n\n  handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    this.setState({\n      [name]: value\n    });\n    console.log(this.state);\n  }\n\n  handleClick(e) {\n    this.getZIP(this.state.zipcode);\n    console.log(this.state);\n  }\n\n  handleCarMake() {\n    fetch('https://vpic.nhtsa.dot.gov/api/vehicles/getallmakes?format=json').then(response => response.json()).then(data => {\n      this.setState({\n        api: data[\"Results\"]\n      });\n      console.log(data[\"Results\"]);\n      console.log(this.state.api);\n    });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.getVIN(this.state.VIN);\n    this.depreciate();\n    this.getZIP(this.state.zipcode);\n\n    if (this.state.mpg.length > 0) {\n      this.getData(this.state.statecode);\n    }\n\n    let final;\n\n    if (this.state.mpg.length > 0) {\n      final = (parseInt(this.state.depreciationValue) + parseInt(this.state.iPaid) + this.state.miles * 52 / this.state.mpg * this.state.gallon + parseInt(this.state.mait) + parseInt(this.state.tolls) * 12 + parseInt(this.state.subscriptions)) / (parseInt(this.state.miles) * 52);\n    } else {\n      final = (parseInt(this.state.depreciationValue) + parseInt(this.state.iPaid) + parseInt(this.state.miles) / parseInt(this.state.fullcharge) * parseInt(this.state.fullchargeCost) + parseInt(this.state.mait) + parseInt(this.state.tolls) * 12 + parseInt(this.state.subscriptions)) / (parseInt(this.state.miles) * 52);\n    }\n\n    this.setState({\n      costpermile: final\n    });\n  }\n\n  getVIN(vin) {\n    if (vin.length > 0) {\n      const http = require(\"https\");\n\n      const options = {\n        \"method\": \"GET\",\n        \"hostname\": \"vindecoder.p.rapidapi.com\",\n        \"port\": null,\n        \"path\": \"/v2.0/decode_vin?vin=\" + this.state.VIN,\n        \"headers\": {\n          \"x-rapidapi-key\": \"73d45d6313mshd16f17ab16d3fe8p1368ecjsn7f132604eddb\",\n          \"x-rapidapi-host\": \"vindecoder.p.rapidapi.com\",\n          \"useQueryString\": true\n        }\n      };\n      var self = this;\n      const req = http.request(options, function (res) {\n        const chunks = [];\n        res.on(\"data\", function (chunk) {\n          chunks.push(chunk);\n        });\n        res.on(\"end\", function () {\n          const body = Buffer.concat(chunks);\n          var bodyJSON = JSON.parse(body.toString());\n          var carData = bodyJSON.specification;\n          self.setState({\n            carYear: carData.year,\n            carMake: carData.make,\n            carModel: carData.model,\n            mpg: carData.highway_mileage.substring(0, carData.highway_mileage.indexOf(\" \"))\n          });\n          console.log(self.state);\n          console.log(bodyJSON);\n        });\n      });\n      req.end();\n    }\n  }\n\n  getZIP(zip) {\n    if (zip.length > 0) {\n      const http = require(\"https\");\n\n      const options = {\n        \"method\": \"GET\",\n        \"hostname\": \"redline-redline-zipcode.p.rapidapi.com\",\n        \"port\": null,\n        \"path\": \"/rest/info.json/\" + this.state.zipcode + \"/degrees\",\n        \"headers\": {\n          \"x-rapidapi-key\": \"73d45d6313mshd16f17ab16d3fe8p1368ecjsn7f132604eddb\",\n          \"x-rapidapi-host\": \"redline-redline-zipcode.p.rapidapi.com\",\n          \"useQueryString\": true\n        }\n      };\n      var self = this;\n      const req = http.request(options, function (res) {\n        const chunks = [];\n        res.on(\"data\", function (chunk) {\n          chunks.push(chunk);\n        });\n        res.on(\"end\", function () {\n          const body = Buffer.concat(chunks);\n          var bodyJSON = JSON.parse(body.toString());\n          console.log(bodyJSON);\n          self.setState({\n            statecode: bodyJSON.state,\n            city: bodyJSON.city\n          });\n          self.getData(self.state.statecode);\n        });\n      });\n      req.end();\n    }\n  }\n\n  getData(state) {\n    if (state.length > 0) {\n      var http = require(\"https\");\n\n      var options = {\n        \"method\": \"GET\",\n        \"hostname\": \"api.collectapi.com\",\n        \"port\": null,\n        \"path\": \"/gasPrice/stateUsaPrice?state=\" + state.toUpperCase(),\n        \"headers\": {\n          \"content-type\": \"application/json\",\n          \"authorization\": \"apikey 6jwMhjlXWz2rcXdhdpLjz6:4X6MQAYjbRiFWwNAxcc5k1\"\n        }\n      };\n      var self = this;\n      var req = http.request(options, function (res) {\n        var chunks = [];\n        res.on(\"data\", function (chunk) {\n          chunks.push(chunk);\n        });\n        res.on(\"end\", function () {\n          var body = Buffer.concat(chunks);\n          var bodyJSON = JSON.parse(body.toString());\n          console.log(bodyJSON);\n          console.log(self.state.typeOfGas);\n          var city = bodyJSON.result.cities.filter(x => x.name.toLowerCase() === self.state.city.toLowerCase());\n\n          if (city.length > 0) {\n            console.log(city[0][self.state.typeOfGas]);\n            self.setState({\n              gallon: city[0][self.state.typeOfGas]\n            });\n          }\n        });\n      });\n      req.end();\n    }\n  }\n\n  render() {\n    let allOptions;\n    /*if (this.state.api.length < 5) {\n        fetch('https://vpic.nhtsa.dot.gov/api/vehicles/getallmakes?format=json')\n            .then(response => response.json())\n            .then(data => {\n                this.setState({ api: data[\"Results\"] });\n             })\n    }\n    allOptions = this.state.api.map((num) => <option>{num.Make_Name}</option>)\n    let allOptions2;\n    let renderCarModel;\n     \n    if (this.state.carMake.length>0 ) {\n        fetch('https://vpic.nhtsa.dot.gov/api/vehicles/GetModelsForMake/' + this.state.carMake + '?format=json')\n            .then(response => response.json())\n            .then(data => {\n                this.setState({ models: data[\"Results\"] });\n             })\n     }\n    */\n\n    var years = [];\n\n    for (var i = 0; i < 100; i++) {\n      years.push(2021 - i);\n    }\n\n    const carYears = years.map(num => /*#__PURE__*/_jsxDEV(\"option\", {\n      children: num\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 45\n    }, this)); //allOptions2 = this.state.models.map((num) => <option>{num.Model_Name}</option>)\n\n    /*if (this.state.carMake.length === 0) {\n        renderCarModel = (<div></div>);\n    }\n    else {\n        renderCarModel = (\n            <div>\n                <Form.Group>\n                    <Form.Label>\n                        what is your model?\n                    </Form.Label>\n                    <Form.Control\n                        as=\"select\"\n                         onChange={this.handleChange}\n                        id=\"carModel\"\n                        name=\"carModel\"\n                        value={this.state.carModel}\n                    >\n                        {allOptions2}\n                    </Form.Control>\n                </Form.Group>\n            </div>\n        );\n     }\n     let renderThis;\n     if (this.state.isElectric.length === 0) {\n        renderThis = (<div></div>);\n    }\n    else if (this.state.isElectric === \"gas\") {\n        renderThis = (<div><Form.Group>\n            <Form.Label>\n                What gas do you use?\n            </Form.Label>\n            <Form.Control as=\"select\"\n                onChange={this.handleChange}\n                id=\"typeOfGas\"\n                type=\"text\"\n                name=\"typeOfGas\"\n                value={this.state.typeOfGas}\n            >\n                <option name=\"typeOfGas\"> gasoline</option>\n                <option name=\"typeOfGas\">midGrade</option>\n                <option name=\"typeOfGas\"> premium</option>\n                <option name=\"typeOfGas\"> diesel</option>\n            </Form.Control>\n            <Form.Text>\n                Do not answer this question if you are an electric vehicle user\n            </Form.Text>\n        </Form.Group>\n              <Form.Group>\n                <Form.Label>\n                    What is your MPG(Miles Per Gallon)?\n                </Form.Label>\n                 <Form.Control\n                    placeholder=\"mpg\"\n                    onChange={this.handleChange}\n                    id=\"mpg\"\n                    type=\"number\"\n                    name=\"mpg\"\n                    value={this.state.mpg}\n                />\n                <Form.Text>\n                    Do not answer this question if you are an electric vehicle user\n                </Form.Text>\n            </Form.Group>\n             <Form.Group>\n                <Form.Label>\n                    What is your zip code?\n                </Form.Label>\n                 <Form.Control\n                    placeholder=\"zip code\"\n                    onChange={this.handleChange}\n                    id=\"zipcode\"\n                    type=\"number\"\n                    name=\"zipcode\"\n                    value={this.state.zipcode}\n                />\n                <Form.Text >\n                    This question gets the gas prices in your area!\n                </Form.Text>\n            </Form.Group>\n              <label>\n                {this.state.city.length > 0 ? \"Your city, state is \" + this.state.city + \", \" + this.state.statecode : \"\"}\n            </label>\n        </div>);\n    } else {\n        renderThis = (<div>\n            <Form.Group>\n                <Form.Label>\n                    If you drive an electric vehicle, how far can you drive on a full charge in miles?\n                </Form.Label>\n                 <Form.Control\n                    placeholder=\"fullcharge\"\n                    onChange={this.handleChange}\n                    id=\"fullcharge\"\n                    type=\"number\"\n                    name=\"fullcharge\"\n                    value={this.state.fullcharge}\n                />\n                <Form.Text>\n                    Do not answer this question if you are a gas vehicle user\n                </Form.Text>\n            </Form.Group>\n            <Form.Group>\n                <Form.Label>\n                    If you drive an electric vehicle, how much does it cost for a full charge?\n                </Form.Label>\n                 <Form.Control\n                    placeholder=\"fullchargeCost\"\n                    onChange={this.handleChange}\n                    id=\"fullchargeCost\"\n                    type=\"number\"\n                    name=\"fullchargeCost\"\n                    value={this.state.fullchargeCost}\n                />\n                <Form.Text>\n                    Do not answer this question if you are a gas vehicle user\n                </Form.Text>\n            </Form.Group>\n        </div>);\n    }\n    */\n\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Jumbotron, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Cost Per Mile Calculator\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Fill out these questions to the best of your abilitiy as they are the basis of calculating your cost per mile. You will be asked about information that you may not know about some of these questions so fill them out to the best of your ability.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Jumbotron, {\n        children: [/*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: this.handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"How many miles do you usually drive per week?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 428,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"number\",\n              placeholder: \"miles driven\",\n              onChange: this.handleChange,\n              id: \"miles\",\n              type: \"number\",\n              name: \"miles\",\n              value: this.state.miles\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 432,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n              className: \"text-muted\",\n              children: \"Enter the miles you usually drive per week\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 440,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 426,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"How much have you paid for insurance a year?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 451,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              placeholder: \"insurance per year\",\n              onChange: this.handleChange,\n              id: \"insurance\",\n              type: \"number\",\n              name: \"iPaid\",\n              value: this.state.iPaid\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 456,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n              className: \"text-muted\",\n              children: \"Enter how much insurace you pay each year\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 464,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 449,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"How much have you paid for maitenance a year?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 473,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              placeholder: \"maitenance a year\",\n              onChange: this.handleChange,\n              id: \"maitenance\",\n              type: \"number\",\n              name: \"mait\",\n              value: this.state.mait\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 478,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n              className: \"text-muted\",\n              children: \"Enter how much you usually pay for maitenance in a year\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 486,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 471,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"How much do you pay for tolls every month?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 493,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              placeholder: \"tolls\",\n              onChange: this.handleChange,\n              id: \"tolls\",\n              type: \"number\",\n              name: \"tolls\",\n              value: this.state.tolls\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 498,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n              className: \"text-muted\",\n              children: \"Enter how much you usually pay for tolls every month\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 506,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 492,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Enter your VIN here\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 514,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              placeholder: \"VIN\",\n              onChange: this.handleChange,\n              id: \"VIN\",\n              type: \"text\",\n              name: \"VIN\",\n              value: this.state.VIN\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 517,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n              children: \"We are gathering this information in order to gather your mpg, car make, car model, and car year.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 525,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 513,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Are you an electric vehicle user or gas car user?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 532,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              as: \"select\",\n              onChange: this.handleChange,\n              id: \"isElectric\",\n              type: \"text\",\n              name: \"isElectric\",\n              value: this.state.isElectric,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                name: \"isElectric\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 545,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                name: \"isElectric\",\n                children: \"gas\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 546,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                name: \"isElectric\",\n                children: \"electric\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 547,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 537,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 551,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 530,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 559,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 560,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"How much do you pay for other related car costs per year?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 563,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              placeholder: \"Other car costs\",\n              onChange: this.handleChange,\n              id: \"subscriptions\",\n              type: \"number\",\n              name: \"subscriptions\",\n              value: this.state.subscriptions\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 566,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 562,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"What is your car make\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 578,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              as: \"select\",\n              placeholder: \"car make\",\n              onChange: this.handleChange,\n              id: \"carMake\",\n              type: \"text\",\n              name: \"carMake\",\n              value: this.state.carMake,\n              children: /*#__PURE__*/_jsxDEV(\"option\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 589,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 581,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 594,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 577,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"What is your car year?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 601,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              onChange: this.handleChange,\n              id: \"carYear\",\n              name: \"carYear\",\n              value: this.state.carYear,\n              as: \"select\",\n              children: carYears\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 604,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 600,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"How much was this car when it was brand new?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 614,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              placeholder: \"original price\",\n              onChange: this.handleChange,\n              id: \"originalPrice\",\n              type: \"number\",\n              name: \"originalPrice\",\n              value: this.state.originalPrice\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 617,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 613,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"How much is your car worth now?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 627,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              placeholder: \"current price\",\n              onChange: this.handleChange,\n              id: \"finalPrice\",\n              type: \"number\",\n              name: \"finalPrice\",\n              value: this.state.finalPrice\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 630,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 626,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 639,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 642,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Cost per mile: $ \", this.state.costpermile.toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 644,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"The average cost per mile is about $0.79 around the United States. The easiest way to improve your cost per mile is to drive more . The type of car that has the lowest average cost per mile is the small Sedan, and the type of car with the highest cost per mile is the pickup truck. The electric car has a good cost per mile; however, its depreciation costs exceed all other car types. The cost per mile of the average electric vehicle is $0.5546\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 647,\n          columnNumber: 21\n        }, this), this.state.costpermile >= 0.79 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Your data shows that your cost per mile is greater than or equal to the average cost per mile in the United States.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 652,\n          columnNumber: 55\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Your data shows that your cost per mile is below the average cost per mile. You are saving a lot of money as these miles add up over time!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 652,\n          columnNumber: 180\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(Calculator, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 661,\n  columnNumber: 5\n}, this), document.getElementById(\"root\"));","map":{"version":3,"sources":["/Users/alexhoang/ReactProjects/CostPerMile/src/index.js"],"names":["React","ReactDOM","Button","Jumbotron","Toast","Container","Form","Calculator","Component","constructor","props","state","costpermile","iPaid","miles","mait","api","models","originalPrice","finalPrice","tolls","statecode","mpg","subscriptions","gallon","typeOfGas","priceOfGas","city","VIN","depreciationValue","fullcharge","fullchargeCost","zipcode","carMake","carModel","isElectric","carYear","handleChange","bind","handleSubmit","handleClick","handleCarMake","depreciate","depreciation","parseInt","setState","event","name","value","target","console","log","e","getZIP","fetch","then","response","json","data","preventDefault","getVIN","length","getData","final","vin","http","require","options","self","req","request","res","chunks","on","chunk","push","body","Buffer","concat","bodyJSON","JSON","parse","toString","carData","specification","year","make","model","highway_mileage","substring","indexOf","end","zip","toUpperCase","result","cities","filter","x","toLowerCase","render","allOptions","years","i","carYears","map","num","toFixed","document","getElementById"],"mappings":"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ACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKQ,QAAIC,KAAK,GAAG,EAAZ;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,GAApB,EAAyBA,CAAC,EAA1B,EAA8B;AAC1BD,MAAAA,KAAK,CAAC1B,IAAN,CAAW,OAAO2B,CAAlB;AACH;;AACD,UAAMC,QAAQ,GAAGF,KAAK,CAACG,GAAN,CAAWC,GAAD,iBAAS;AAAA,gBAASA;AAAT;AAAA;AAAA;AAAA;AAAA,YAAnB,CAAjB,CA7BK,CA8BL;;AACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAcQ,wBACI,QAAC,SAAD;AAAA,8BAEI,QAAC,SAAD;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAWI,QAAC,SAAD;AAAA,gCAGI,QAAC,IAAD;AAAM,UAAA,QAAQ,EAAE,KAAKlE,YAArB;AAAA,kCACI,QAA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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport Button from 'react-bootstrap/Button';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Toast from 'react-bootstrap/Toast';\nimport Container from 'react-bootstrap/Container';\nimport { Form } from 'react-bootstrap';\n\nclass Calculator extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            costpermile: 0,\n            iPaid: \"\",\n            miles: \"\",\n            mait: \"\",\n            api: [],\n            models: [],\n            originalPrice: \"\",\n            finalPrice: \"\",\n            tolls: \"\",\n            statecode: \"\",\n            mpg: \"\",\n            subscriptions: \"\",\n            gallon: \"\",\n            typeOfGas: \"gasoline\",\n            priceOfGas: \"\",\n            city: \"\",\n            VIN: \"\",\n            depreciationValue: \"\",\n            fullcharge: \"\",\n            fullchargeCost: \"\",\n            zipcode: \"\",\n            carMake: \"\",\n            carModel: \"\",\n            isElectric: \"\",\n            carYear: \"\",\n            \n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n        this.handleCarMake = this.handleCarMake.bind(this);\n\n\n    }\n\n    depreciate() {\n\n        let depreciation = (parseInt(this.state.originalPrice) - parseInt(this.state.finalPrice)) / (2021 - parseInt(this.state.carYear));\n        this.setState({ depreciationValue: depreciation });\n    }\n    handleChange(event) {\n        const { name, value } = event.target\n        this.setState({\n            [name]: value,\n        });\n\n        console.log(this.state);\n    }\n    handleClick(e) {\n        this.getZIP(this.state.zipcode);\n        console.log(this.state);\n    }\n    handleCarMake() {\n        fetch('https://vpic.nhtsa.dot.gov/api/vehicles/getallmakes?format=json')\n            .then(response => response.json())\n            .then(data => {\n                this.setState({ api: data[\"Results\"] })\n                console.log(data[\"Results\"])\n                console.log(this.state.api);\n            })\n\n    }\n    handleSubmit(e) {\n        e.preventDefault();\n        this.getVIN(this.state.VIN);\n        this.depreciate();\n        this.getZIP(this.state.zipcode);\n\n        if (this.state.mpg.length > 0) {\n            this.getData(this.state.statecode);\n        }\n\n\n        let final;\n\n        if (this.state.mpg.length > 0) {\n            final = (parseInt(this.state.depreciationValue) +\n                parseInt(this.state.iPaid) +\n                (((this.state.miles * 52) / this.state.mpg) * this.state.gallon) +\n                parseInt(this.state.mait) +\n                (parseInt(this.state.tolls) * 12) +\n                parseInt(this.state.subscriptions))\n                / (parseInt(this.state.miles) * 52);\n        } else {\n            final = (parseInt(this.state.depreciationValue) +\n                parseInt(this.state.iPaid) +\n                ((parseInt(this.state.miles) / parseInt(this.state.fullcharge)) * parseInt(this.state.fullchargeCost)) +\n                parseInt(this.state.mait) +\n                (parseInt(this.state.tolls) * 12) +\n                parseInt(this.state.subscriptions)) /\n                (parseInt(this.state.miles) * 52);\n\n        }\n\n        this.setState(\n            {\n                costpermile: final\n            })\n    }\n    getVIN(vin) {\n        if (vin.length > 0) {\n            const http = require(\"https\");\n\n            const options = {\n                \"method\": \"GET\",\n                \"hostname\": \"vindecoder.p.rapidapi.com\",\n                \"port\": null,\n                \"path\": \"/v2.0/decode_vin?vin=\" + this.state.VIN,\n                \"headers\": {\n                    \"x-rapidapi-key\": \"73d45d6313mshd16f17ab16d3fe8p1368ecjsn7f132604eddb\",\n                    \"x-rapidapi-host\": \"vindecoder.p.rapidapi.com\",\n                    \"useQueryString\": true\n                }\n            };\n            var self = this;\n            const req = http.request(options, function (res) {\n                const chunks = [];\n\n                res.on(\"data\", function (chunk) {\n                    chunks.push(chunk);\n                });\n\n                res.on(\"end\", function () {\n                    const body = Buffer.concat(chunks);\n                    var bodyJSON = JSON.parse(body.toString());\n                    var carData = bodyJSON.specification\n                    self.setState({\n                        carYear: carData.year,\n                        carMake: carData.make,\n                        carModel: carData.model,\n                        mpg: carData.highway_mileage.substring(0, carData.highway_mileage.indexOf(\" \")),\n                        \n                    })\n                    \n                    console.log(self.state);\n                    console.log(bodyJSON);\n                });\n            });\n\n            req.end();\n        }\n    }\n\n    getZIP(zip) {\n        if (zip.length > 0) {\n            const http = require(\"https\");\n\n            const options = {\n                \"method\": \"GET\",\n                \"hostname\": \"redline-redline-zipcode.p.rapidapi.com\",\n                \"port\": null,\n                \"path\": \"/rest/info.json/\" + this.state.zipcode + \"/degrees\",\n                \"headers\": {\n                    \"x-rapidapi-key\": \"73d45d6313mshd16f17ab16d3fe8p1368ecjsn7f132604eddb\",\n                    \"x-rapidapi-host\": \"redline-redline-zipcode.p.rapidapi.com\",\n                    \"useQueryString\": true\n                }\n            };\n            var self = this;\n            const req = http.request(options, function (res) {\n                const chunks = [];\n\n                res.on(\"data\", function (chunk) {\n                    chunks.push(chunk);\n                });\n\n                res.on(\"end\", function () {\n                    const body = Buffer.concat(chunks);\n\n                    var bodyJSON = JSON.parse(body.toString());\n                    console.log(bodyJSON);\n                    self.setState({\n                        statecode: bodyJSON.state,\n                        city: bodyJSON.city,\n                    })\n\n\n                    self.getData(self.state.statecode);\n\n                });\n            });\n\n            req.end();\n        }\n    }\n\n\n    getData(state) {\n        if (state.length > 0) {\n            var http = require(\"https\");\n\n            var options = {\n                \"method\": \"GET\",\n                \"hostname\": \"api.collectapi.com\",\n                \"port\": null,\n                \"path\": \"/gasPrice/stateUsaPrice?state=\" + state.toUpperCase(),\n                \"headers\": {\n                    \"content-type\": \"application/json\",\n                    \"authorization\": \"apikey 6jwMhjlXWz2rcXdhdpLjz6:4X6MQAYjbRiFWwNAxcc5k1\"\n                }\n            };\n            var self = this;\n            var req = http.request(options, function (res) {\n                var chunks = [];\n\n                res.on(\"data\", function (chunk) {\n                    chunks.push(chunk);\n                });\n\n                res.on(\"end\", function () {\n                    var body = Buffer.concat(chunks);\n                    var bodyJSON = JSON.parse(body.toString());\n                    console.log(bodyJSON);\n                    console.log(self.state.typeOfGas);\n                    var city = bodyJSON.result.cities.filter((x) => x.name.toLowerCase() === self.state.city.toLowerCase());\n                    if (city.length > 0) {\n                        console.log(city[0][self.state.typeOfGas]);\n                        self.setState({\n                            gallon: city[0][self.state.typeOfGas]\n                        })\n                    }\n\n                });\n            });\n\n            req.end();\n\n        }\n    }\n    render() {\n        let allOptions;\n        /*if (this.state.api.length < 5) {\n            fetch('https://vpic.nhtsa.dot.gov/api/vehicles/getallmakes?format=json')\n                .then(response => response.json())\n                .then(data => {\n                    this.setState({ api: data[\"Results\"] });\n\n                })\n        }\n        allOptions = this.state.api.map((num) => <option>{num.Make_Name}</option>)\n        let allOptions2;\n        let renderCarModel;\n\n        \n        if (this.state.carMake.length>0 ) {\n            fetch('https://vpic.nhtsa.dot.gov/api/vehicles/GetModelsForMake/' + this.state.carMake + '?format=json')\n                .then(response => response.json())\n                .then(data => {\n                    this.setState({ models: data[\"Results\"] });\n\n                })\n\n        }\n        */\n        var years = [];\n        for (var i = 0; i < 100; i++) {\n            years.push(2021 - i);\n        }\n        const carYears = years.map((num) => <option>{num}</option>)\n        //allOptions2 = this.state.models.map((num) => <option>{num.Model_Name}</option>)\n        /*if (this.state.carMake.length === 0) {\n            renderCarModel = (<div></div>);\n        }\n        else {\n            renderCarModel = (\n                <div>\n                    <Form.Group>\n                        <Form.Label>\n                            what is your model?\n                        </Form.Label>\n                        <Form.Control\n                            as=\"select\"\n\n                            onChange={this.handleChange}\n                            id=\"carModel\"\n                            name=\"carModel\"\n                            value={this.state.carModel}\n                        >\n                            {allOptions2}\n                        </Form.Control>\n                    </Form.Group>\n                </div>\n            );\n\n        }\n\n        let renderThis;\n\n        if (this.state.isElectric.length === 0) {\n            renderThis = (<div></div>);\n        }\n        else if (this.state.isElectric === \"gas\") {\n            renderThis = (<div><Form.Group>\n                <Form.Label>\n                    What gas do you use?\n                </Form.Label>\n                <Form.Control as=\"select\"\n                    onChange={this.handleChange}\n                    id=\"typeOfGas\"\n                    type=\"text\"\n                    name=\"typeOfGas\"\n                    value={this.state.typeOfGas}\n                >\n                    <option name=\"typeOfGas\"> gasoline</option>\n                    <option name=\"typeOfGas\">midGrade</option>\n                    <option name=\"typeOfGas\"> premium</option>\n                    <option name=\"typeOfGas\"> diesel</option>\n                </Form.Control>\n                <Form.Text>\n                    Do not answer this question if you are an electric vehicle user\n                </Form.Text>\n            </Form.Group>\n\n\n                <Form.Group>\n                    <Form.Label>\n                        What is your MPG(Miles Per Gallon)?\n                    </Form.Label>\n\n                    <Form.Control\n                        placeholder=\"mpg\"\n                        onChange={this.handleChange}\n                        id=\"mpg\"\n                        type=\"number\"\n                        name=\"mpg\"\n                        value={this.state.mpg}\n                    />\n                    <Form.Text>\n                        Do not answer this question if you are an electric vehicle user\n                    </Form.Text>\n                </Form.Group>\n\n                <Form.Group>\n                    <Form.Label>\n                        What is your zip code?\n                    </Form.Label>\n\n                    <Form.Control\n                        placeholder=\"zip code\"\n                        onChange={this.handleChange}\n                        id=\"zipcode\"\n                        type=\"number\"\n                        name=\"zipcode\"\n                        value={this.state.zipcode}\n                    />\n                    <Form.Text >\n                        This question gets the gas prices in your area!\n                    </Form.Text>\n                </Form.Group>\n\n\n                <label>\n                    {this.state.city.length > 0 ? \"Your city, state is \" + this.state.city + \", \" + this.state.statecode : \"\"}\n                </label>\n            </div>);\n        } else {\n            renderThis = (<div>\n                <Form.Group>\n                    <Form.Label>\n                        If you drive an electric vehicle, how far can you drive on a full charge in miles?\n                    </Form.Label>\n\n                    <Form.Control\n                        placeholder=\"fullcharge\"\n                        onChange={this.handleChange}\n                        id=\"fullcharge\"\n                        type=\"number\"\n                        name=\"fullcharge\"\n                        value={this.state.fullcharge}\n                    />\n                    <Form.Text>\n                        Do not answer this question if you are a gas vehicle user\n                    </Form.Text>\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>\n                        If you drive an electric vehicle, how much does it cost for a full charge?\n                    </Form.Label>\n\n                    <Form.Control\n                        placeholder=\"fullchargeCost\"\n                        onChange={this.handleChange}\n                        id=\"fullchargeCost\"\n                        type=\"number\"\n                        name=\"fullchargeCost\"\n                        value={this.state.fullchargeCost}\n                    />\n                    <Form.Text>\n                        Do not answer this question if you are a gas vehicle user\n                    </Form.Text>\n                </Form.Group>\n            </div>);\n        }\n        */\n        return (\n            <Container>\n\n                <Jumbotron>\n                    <h1>\n                        Cost Per Mile Calculator\n\n                    </h1>\n                    <p>\n                        Fill out these questions to the best of your abilitiy as they are the basis of calculating your cost per mile. You will be asked about information that you may not know about some of these questions so fill them out to the best of your ability.\n                    </p>\n                </Jumbotron>\n                <Jumbotron>\n\n\n                    <Form onSubmit={this.handleSubmit}>\n                        <Form.Group>\n\n                            <Form.Label>\n                                How many miles do you usually drive per week?\n                            </Form.Label>\n\n                            <Form.Control type=\"number\"\n                                placeholder=\"miles driven\"\n                                onChange={this.handleChange}\n                                id=\"miles\"\n                                type=\"number\"\n                                name=\"miles\"\n                                value={this.state.miles}\n                            />\n                            <Form.Text className=\"text-muted\">\n                                Enter the miles you usually drive per week\n                            </Form.Text>\n\n\n                        </Form.Group>\n\n\n\n                        <Form.Group>\n\n                            <Form.Label>\n                                How much have you paid for insurance a year?\n                            </Form.Label>\n\n\n                            <Form.Control\n                                placeholder=\"insurance per year\"\n                                onChange={this.handleChange}\n                                id=\"insurance\"\n                                type=\"number\"\n                                name=\"iPaid\"\n                                value={this.state.iPaid}\n                            />\n                            <Form.Text className=\"text-muted\">\n                                Enter how much insurace you pay each year\n                            </Form.Text>\n                        </Form.Group>\n\n\n\n                        <Form.Group>\n\n                            <Form.Label>\n                                How much have you paid for maitenance a year?\n                            </Form.Label>\n\n\n                            <Form.Control\n                                placeholder=\"maitenance a year\"\n                                onChange={this.handleChange}\n                                id=\"maitenance\"\n                                type=\"number\"\n                                name=\"mait\"\n                                value={this.state.mait}\n                            />\n                            <Form.Text className=\"text-muted\">\n                                Enter how much you usually pay for maitenance in a year\n                            </Form.Text>\n                        </Form.Group>\n\n\n                        <Form.Group>\n                            <Form.Label>\n                                How much do you pay for tolls every month?\n                            </Form.Label>\n\n\n                            <Form.Control\n                                placeholder=\"tolls\"\n                                onChange={this.handleChange}\n                                id=\"tolls\"\n                                type=\"number\"\n                                name=\"tolls\"\n                                value={this.state.tolls}\n                            />\n                            <Form.Text className=\"text-muted\">\n                                Enter how much you usually pay for tolls every month\n                            </Form.Text>\n                        </Form.Group>\n\n\n\n                        <Form.Group>\n                            <Form.Label>\n                                Enter your VIN here\n                            </Form.Label>\n                            <Form.Control\n                                placeholder=\"VIN\"\n                                onChange={this.handleChange}\n                                id=\"VIN\"\n                                type=\"text\"\n                                name=\"VIN\"\n                                value={this.state.VIN}\n                            />\n                            <Form.Text>\n                                We are gathering this information in order to gather your mpg, car make, car model, and car year.\n                            </Form.Text>\n                        </Form.Group>\n\n                        <Form.Group>\n\n                            <Form.Label>\n                                Are you an electric vehicle user or gas car user?\n                            </Form.Label>\n\n\n                            <Form.Control as=\"select\"\n\n                                onChange={this.handleChange}\n                                id=\"isElectric\"\n                                type=\"text\"\n                                name=\"isElectric\"\n                                value={this.state.isElectric}\n                            >\n                                <option name=\"isElectric\"></option>\n                                <option name=\"isElectric\">gas</option>\n                                <option name=\"isElectric\">electric</option>\n\n                            </Form.Control>\n\n                            <div>\n                             {//   {renderThis} \n    }\n                            </div>\n\n                        </Form.Group>\n\n\n                        <br />\n                        <br />\n\n                        <Form.Group>\n                            <Form.Label>\n                                How much do you pay for other related car costs per year?\n                            </Form.Label>\n                            <Form.Control\n                                placeholder=\"Other car costs\"\n                                onChange={this.handleChange}\n                                id=\"subscriptions\"\n                                type=\"number\"\n                                name=\"subscriptions\"\n                                value={this.state.subscriptions}\n                            />\n\n\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>\n                                What is your car make\n                            </Form.Label>\n                            <Form.Control as=\"select\"\n                                placeholder=\"car make\"\n                                onChange={this.handleChange}\n                                id=\"carMake\"\n                                type=\"text\"\n                                name=\"carMake\"\n                                value={this.state.carMake}\n                            >\n                                <option></option>\n                            {//    {allOptions}\n    }\n                            </Form.Control>\n\n                            <div>\n                             {//   {renderCarModel}\n    }\n                            </div>\n\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>\n                                What is your car year?\n                            </Form.Label>\n                            <Form.Control\n                                onChange={this.handleChange}\n                                id=\"carYear\"\n                                name=\"carYear\"\n                                value={this.state.carYear}\n                                as=\"select\">\n                                {carYears}\n                            </Form.Control>\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>\n                                How much was this car when it was brand new?\n                            </Form.Label>\n                            <Form.Control\n                                placeholder=\"original price\"\n                                onChange={this.handleChange}\n                                id=\"originalPrice\"\n                                type=\"number\"\n                                name=\"originalPrice\"\n                                value={this.state.originalPrice}\n                            />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>\n                                How much is your car worth now?\n                            </Form.Label>\n                            <Form.Control\n                                placeholder=\"current price\"\n                                onChange={this.handleChange}\n                                id=\"finalPrice\"\n                                type=\"number\"\n                                name=\"finalPrice\"\n                                value={this.state.finalPrice}\n                            />\n                        </Form.Group>\n                        <input type=\"submit\"\n                        />\n                    </Form>\n                    <br />\n\n                    <h2>\n                        Cost per mile: $ {this.state.costpermile.toFixed(2)}\n                    </h2>\n                    <p>\n\n                        The average cost per mile is about $0.79 around the United States. The easiest way to improve your cost per mile is to drive more . The type of car that has the lowest average cost per mile is the small Sedan, and the type of car with the highest cost per mile is the pickup truck. The electric car has a good cost per mile; however, its depreciation costs exceed all other car types.\n                        The cost per mile of the average electric vehicle is $0.5546\n                    </p>\n                    {this.state.costpermile >= 0.79 ? <p>Your data shows that your cost per mile is greater than or equal to the average cost per mile in the United States.</p> : <p>Your data shows that your cost per mile is below the average cost per mile. You are saving a lot of money as these miles add up over time!</p>}\n\n                </Jumbotron>\n            </Container>\n        );\n    }\n}\n\nReactDOM.render(\n    <Calculator />,\n    document.getElementById(\"root\")\n);\n"]},"metadata":{},"sourceType":"module"}